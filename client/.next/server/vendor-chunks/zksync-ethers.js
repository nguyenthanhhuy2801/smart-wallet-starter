"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/zksync-ethers";
exports.ids = ["vendor-chunks/zksync-ethers"];
exports.modules = {

/***/ "(ssr)/./node_modules/zksync-ethers/build/src/adapters.js":
/*!**********************************************************!*\
  !*** ./node_modules/zksync-ethers/build/src/adapters.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AdapterL2 = exports.AdapterL1 = void 0;\nconst ethers_1 = __webpack_require__(/*! ethers */ \"(ssr)/./node_modules/ethers/lib.esm/index.js\");\nconst Ierc20Factory_1 = __webpack_require__(/*! ../typechain/Ierc20Factory */ \"(ssr)/./node_modules/zksync-ethers/build/typechain/Ierc20Factory.js\");\nconst Il1BridgeFactory_1 = __webpack_require__(/*! ../typechain/Il1BridgeFactory */ \"(ssr)/./node_modules/zksync-ethers/build/typechain/Il1BridgeFactory.js\");\nconst Il2BridgeFactory_1 = __webpack_require__(/*! ../typechain/Il2BridgeFactory */ \"(ssr)/./node_modules/zksync-ethers/build/typechain/Il2BridgeFactory.js\");\nconst IZkSyncFactory_1 = __webpack_require__(/*! ../typechain/IZkSyncFactory */ \"(ssr)/./node_modules/zksync-ethers/build/typechain/IZkSyncFactory.js\");\nconst INonceHolderFactory_1 = __webpack_require__(/*! ../typechain/INonceHolderFactory */ \"(ssr)/./node_modules/zksync-ethers/build/typechain/INonceHolderFactory.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/zksync-ethers/build/src/utils.js\");\nfunction AdapterL1(Base) {\n    return class Adapter extends Base {\n        _providerL2() {\n            throw new Error(\"Must be implemented by the derived class!\");\n        }\n        _providerL1() {\n            throw new Error(\"Must be implemented by the derived class!\");\n        }\n        _signerL1() {\n            throw new Error(\"Must be implemented by the derived class!\");\n        }\n        async getMainContract() {\n            const address = await this._providerL2().getMainContractAddress();\n            return IZkSyncFactory_1.IZkSyncFactory.connect(address, this._signerL1());\n        }\n        async getL1BridgeContracts() {\n            const addresses = await this._providerL2().getDefaultBridgeAddresses();\n            return {\n                erc20: Il1BridgeFactory_1.Il1BridgeFactory.connect(addresses.erc20L1, this._signerL1()),\n                weth: Il1BridgeFactory_1.Il1BridgeFactory.connect(addresses.wethL1, this._signerL1()),\n            };\n        }\n        async getBalanceL1(token, blockTag) {\n            token !== null && token !== void 0 ? token : (token = utils_1.ETH_ADDRESS);\n            if ((0, utils_1.isETH)(token)) {\n                return await this._providerL1().getBalance(await this.getAddress(), blockTag);\n            }\n            else {\n                const erc20contract = Ierc20Factory_1.Ierc20Factory.connect(token, this._providerL1());\n                return await erc20contract.balanceOf(await this.getAddress());\n            }\n        }\n        async getAllowanceL1(token, bridgeAddress, blockTag) {\n            if (!bridgeAddress) {\n                const bridgeContracts = await this.getL1BridgeContracts();\n                let l2WethToken = ethers_1.ethers.constants.AddressZero;\n                try {\n                    l2WethToken = await bridgeContracts.weth.l2TokenAddress(token);\n                }\n                catch (e) { }\n                // If the token is Wrapped Ether, return allowance to its own bridge, otherwise to the default ERC20 bridge.\n                bridgeAddress =\n                    l2WethToken != ethers_1.ethers.constants.AddressZero\n                        ? bridgeContracts.weth.address\n                        : bridgeContracts.erc20.address;\n            }\n            const erc20contract = Ierc20Factory_1.Ierc20Factory.connect(token, this._providerL1());\n            return await erc20contract.allowance(await this.getAddress(), bridgeAddress, {\n                blockTag,\n            });\n        }\n        async l2TokenAddress(token) {\n            if (token == utils_1.ETH_ADDRESS) {\n                return utils_1.ETH_ADDRESS;\n            }\n            const bridgeContracts = await this.getL1BridgeContracts();\n            try {\n                const l2WethToken = await bridgeContracts.weth.l2TokenAddress(token);\n                // If the token is Wrapped Ether, return its L2 token address.\n                if (l2WethToken != ethers_1.ethers.constants.AddressZero) {\n                    return l2WethToken;\n                }\n            }\n            catch (e) { }\n            return await bridgeContracts.erc20.l2TokenAddress(token);\n        }\n        async approveERC20(token, amount, overrides) {\n            if ((0, utils_1.isETH)(token)) {\n                throw new Error(\"ETH token can't be approved. The address of the token does not exist on L1.\");\n            }\n            let bridgeAddress = overrides === null || overrides === void 0 ? void 0 : overrides.bridgeAddress;\n            const erc20contract = Ierc20Factory_1.Ierc20Factory.connect(token, this._signerL1());\n            if (bridgeAddress == null) {\n                const bridgeContracts = await this.getL1BridgeContracts();\n                let l2WethToken = ethers_1.ethers.constants.AddressZero;\n                try {\n                    l2WethToken = await bridgeContracts.weth.l2TokenAddress(token);\n                }\n                catch (e) { }\n                // If the token is Wrapped Ether, return corresponding bridge, otherwise return default ERC20 bridge\n                bridgeAddress =\n                    l2WethToken != ethers_1.ethers.constants.AddressZero\n                        ? bridgeContracts.weth.address\n                        : bridgeContracts.erc20.address;\n            }\n            else {\n                delete overrides.bridgeAddress;\n            }\n            overrides !== null && overrides !== void 0 ? overrides : (overrides = {});\n            return await erc20contract.approve(bridgeAddress, amount, overrides);\n        }\n        async getBaseCost(params) {\n            var _a, _b;\n            const zksyncContract = await this.getMainContract();\n            const parameters = { ...(0, utils_1.layer1TxDefaults)(), ...params };\n            (_a = parameters.gasPrice) !== null && _a !== void 0 ? _a : (parameters.gasPrice = await this._providerL1().getGasPrice());\n            (_b = parameters.gasPerPubdataByte) !== null && _b !== void 0 ? _b : (parameters.gasPerPubdataByte = utils_1.REQUIRED_L1_TO_L2_GAS_PER_PUBDATA_LIMIT);\n            return ethers_1.BigNumber.from(await zksyncContract.l2TransactionBaseCost(parameters.gasPrice, parameters.gasLimit, parameters.gasPerPubdataByte));\n        }\n        async deposit(transaction) {\n            var _a, _b, _c;\n            var _d;\n            const depositTx = await this.getDepositTx(transaction);\n            if (transaction.token == utils_1.ETH_ADDRESS) {\n                const baseGasLimit = await this.estimateGasRequestExecute(depositTx);\n                const gasLimit = (0, utils_1.scaleGasLimit)(baseGasLimit);\n                (_a = depositTx.overrides) !== null && _a !== void 0 ? _a : (depositTx.overrides = {});\n                (_b = (_d = depositTx.overrides).gasLimit) !== null && _b !== void 0 ? _b : (_d.gasLimit = gasLimit);\n                return this.requestExecute(depositTx);\n            }\n            else {\n                const bridgeContracts = await this.getL1BridgeContracts();\n                if (transaction.approveERC20) {\n                    let l2WethToken = ethers_1.ethers.constants.AddressZero;\n                    try {\n                        l2WethToken = await bridgeContracts.weth.l2TokenAddress(transaction.token);\n                    }\n                    catch (e) { }\n                    // If the token is Wrapped Ether, use its bridge.\n                    const proposedBridge = l2WethToken != ethers_1.ethers.constants.AddressZero\n                        ? bridgeContracts.weth.address\n                        : bridgeContracts.erc20.address;\n                    const bridgeAddress = transaction.bridgeAddress\n                        ? transaction.bridgeAddress\n                        : proposedBridge;\n                    // We only request the allowance if the current one is not enough.\n                    const allowance = await this.getAllowanceL1(transaction.token, bridgeAddress);\n                    if (allowance.lt(transaction.amount)) {\n                        const approveTx = await this.approveERC20(transaction.token, transaction.amount, {\n                            bridgeAddress,\n                            ...transaction.approveOverrides,\n                        });\n                        await approveTx.wait();\n                    }\n                }\n                const baseGasLimit = await this._providerL1().estimateGas(depositTx);\n                const gasLimit = (0, utils_1.scaleGasLimit)(baseGasLimit);\n                (_c = depositTx.gasLimit) !== null && _c !== void 0 ? _c : (depositTx.gasLimit = gasLimit);\n                return await this._providerL2().getPriorityOpResponse(await this._signerL1().sendTransaction(depositTx));\n            }\n        }\n        async estimateGasDeposit(transaction) {\n            const depositTx = await this.getDepositTx(transaction);\n            let baseGasLimit;\n            if (transaction.token == utils_1.ETH_ADDRESS) {\n                baseGasLimit = await this.estimateGasRequestExecute(depositTx);\n            }\n            else {\n                baseGasLimit = await this._providerL1().estimateGas(depositTx);\n            }\n            return (0, utils_1.scaleGasLimit)(baseGasLimit);\n        }\n        async getDepositTx(transaction) {\n            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;\n            const bridgeContracts = await this.getL1BridgeContracts();\n            if (transaction.bridgeAddress != null) {\n                bridgeContracts.erc20 = bridgeContracts.erc20.attach(transaction.bridgeAddress);\n            }\n            const { ...tx } = transaction;\n            (_a = tx.to) !== null && _a !== void 0 ? _a : (tx.to = await this.getAddress());\n            (_b = tx.operatorTip) !== null && _b !== void 0 ? _b : (tx.operatorTip = ethers_1.BigNumber.from(0));\n            (_c = tx.overrides) !== null && _c !== void 0 ? _c : (tx.overrides = {});\n            (_d = tx.gasPerPubdataByte) !== null && _d !== void 0 ? _d : (tx.gasPerPubdataByte = utils_1.REQUIRED_L1_TO_L2_GAS_PER_PUBDATA_LIMIT);\n            if (tx.bridgeAddress != null) {\n                const customBridgeData = ((_e = tx.customBridgeData) !== null && _e !== void 0 ? _e : bridgeContracts.weth.address == tx.bridgeAddress)\n                    ? \"0x\"\n                    : await (0, utils_1.getERC20DefaultBridgeData)(tx.token, this._providerL1());\n                const bridge = Il1BridgeFactory_1.Il1BridgeFactory.connect(tx.bridgeAddress, this._signerL1());\n                const l2Address = await bridge.l2Bridge();\n                (_f = tx.l2GasLimit) !== null && _f !== void 0 ? _f : (tx.l2GasLimit = await (0, utils_1.estimateCustomBridgeDepositL2Gas)(this._providerL2(), tx.bridgeAddress, l2Address, tx.token, tx.amount, tx.to, customBridgeData, await this.getAddress(), tx.gasPerPubdataByte));\n            }\n            else {\n                (_g = tx.l2GasLimit) !== null && _g !== void 0 ? _g : (tx.l2GasLimit = await (0, utils_1.estimateDefaultBridgeDepositL2Gas)(this._providerL1(), this._providerL2(), tx.token, tx.amount, tx.to, await this.getAddress(), tx.gasPerPubdataByte));\n            }\n            const { to, token, amount, operatorTip, overrides } = tx;\n            await insertGasPrice(this._providerL1(), overrides);\n            const gasPriceForEstimation = overrides.maxFeePerGas || overrides.gasPrice;\n            const zksyncContract = await this.getMainContract();\n            const baseCost = await zksyncContract.l2TransactionBaseCost(await gasPriceForEstimation, tx.l2GasLimit, tx.gasPerPubdataByte);\n            if (token == utils_1.ETH_ADDRESS) {\n                (_h = overrides.value) !== null && _h !== void 0 ? _h : (overrides.value = baseCost.add(operatorTip).add(amount));\n                return {\n                    contractAddress: to,\n                    calldata: \"0x\",\n                    l2Value: amount,\n                    ...tx,\n                };\n            }\n            else {\n                let refundRecipient = (_j = tx.refundRecipient) !== null && _j !== void 0 ? _j : ethers_1.ethers.constants.AddressZero;\n                const args = [\n                    to,\n                    token,\n                    amount,\n                    tx.l2GasLimit,\n                    tx.gasPerPubdataByte,\n                    refundRecipient,\n                ];\n                (_k = overrides.value) !== null && _k !== void 0 ? _k : (overrides.value = baseCost.add(operatorTip));\n                await (0, utils_1.checkBaseCost)(baseCost, overrides.value);\n                let l2WethToken = ethers_1.ethers.constants.AddressZero;\n                try {\n                    l2WethToken = await bridgeContracts.weth.l2TokenAddress(tx.token);\n                }\n                catch (e) { }\n                const bridge = l2WethToken != ethers_1.ethers.constants.AddressZero\n                    ? bridgeContracts.weth\n                    : bridgeContracts.erc20;\n                return await bridge.populateTransaction.deposit(...args, overrides);\n            }\n        }\n        // Retrieves the full needed ETH fee for the deposit.\n        // Returns the L1 fee and the L2 fee.\n        async getFullRequiredDepositFee(transaction) {\n            var _a, _b, _c, _d;\n            // It is assumed that the L2 fee for the transaction does not depend on its value.\n            const dummyAmount = \"1\";\n            const { ...tx } = transaction;\n            const zksyncContract = await this.getMainContract();\n            (_a = tx.overrides) !== null && _a !== void 0 ? _a : (tx.overrides = {});\n            await insertGasPrice(this._providerL1(), tx.overrides);\n            const gasPriceForMessages = (await tx.overrides.maxFeePerGas) || (await tx.overrides.gasPrice);\n            (_b = tx.to) !== null && _b !== void 0 ? _b : (tx.to = await this.getAddress());\n            (_c = tx.gasPerPubdataByte) !== null && _c !== void 0 ? _c : (tx.gasPerPubdataByte = utils_1.REQUIRED_L1_TO_L2_GAS_PER_PUBDATA_LIMIT);\n            let l2GasLimit = null;\n            if (tx.bridgeAddress != null) {\n                const bridgeContracts = await this.getL1BridgeContracts();\n                const customBridgeData = ((_d = tx.customBridgeData) !== null && _d !== void 0 ? _d : bridgeContracts.weth.address == tx.bridgeAddress)\n                    ? \"0x\"\n                    : await (0, utils_1.getERC20DefaultBridgeData)(tx.token, this._providerL1());\n                let bridge = Il1BridgeFactory_1.Il1BridgeFactory.connect(tx.bridgeAddress, this._signerL1());\n                let l2Address = await bridge.l2Bridge();\n                l2GasLimit !== null && l2GasLimit !== void 0 ? l2GasLimit : (l2GasLimit = await (0, utils_1.estimateCustomBridgeDepositL2Gas)(this._providerL2(), tx.bridgeAddress, l2Address, tx.token, dummyAmount, tx.to, customBridgeData, await this.getAddress(), tx.gasPerPubdataByte));\n            }\n            else {\n                l2GasLimit !== null && l2GasLimit !== void 0 ? l2GasLimit : (l2GasLimit = await (0, utils_1.estimateDefaultBridgeDepositL2Gas)(this._providerL1(), this._providerL2(), tx.token, dummyAmount, tx.to, await this.getAddress(), tx.gasPerPubdataByte));\n            }\n            const baseCost = await zksyncContract.l2TransactionBaseCost(gasPriceForMessages, l2GasLimit, tx.gasPerPubdataByte);\n            const selfBalanceETH = await this.getBalanceL1();\n            // We could use 0, because the final fee will anyway be bigger than\n            if (baseCost.gte(selfBalanceETH.add(dummyAmount))) {\n                const recommendedETHBalance = ethers_1.BigNumber.from(tx.token == utils_1.ETH_ADDRESS\n                    ? utils_1.L1_RECOMMENDED_MIN_ETH_DEPOSIT_GAS_LIMIT\n                    : utils_1.L1_RECOMMENDED_MIN_ERC20_DEPOSIT_GAS_LIMIT)\n                    .mul(gasPriceForMessages)\n                    .add(baseCost);\n                const formattedRecommendedBalance = ethers_1.ethers.utils.formatEther(recommendedETHBalance);\n                throw new Error(`Not enough balance for deposit. Under the provided gas price, the recommended balance to perform a deposit is ${formattedRecommendedBalance} ETH`);\n            }\n            // For ETH token the value that the user passes to the estimation is the one which has the\n            // value for the L2 commission substracted.\n            let amountForEstimate;\n            if ((0, utils_1.isETH)(tx.token)) {\n                amountForEstimate = ethers_1.BigNumber.from(dummyAmount);\n            }\n            else {\n                amountForEstimate = ethers_1.BigNumber.from(dummyAmount);\n                if ((await this.getAllowanceL1(tx.token)) < amountForEstimate) {\n                    throw new Error(\"Not enough allowance to cover the deposit\");\n                }\n            }\n            // Deleting the explicit gas limits in the fee estimation\n            // in order to prevent the situation where the transaction\n            // fails because the user does not have enough balance\n            const estimationOverrides = { ...tx.overrides };\n            delete estimationOverrides.gasPrice;\n            delete estimationOverrides.maxFeePerGas;\n            delete estimationOverrides.maxPriorityFeePerGas;\n            const l1GasLimit = await this.estimateGasDeposit({\n                ...tx,\n                amount: amountForEstimate,\n                overrides: estimationOverrides,\n                l2GasLimit,\n            });\n            const fullCost = {\n                baseCost,\n                l1GasLimit,\n                l2GasLimit,\n            };\n            if (tx.overrides.gasPrice) {\n                fullCost.gasPrice = ethers_1.BigNumber.from(await tx.overrides.gasPrice);\n            }\n            else {\n                fullCost.maxFeePerGas = ethers_1.BigNumber.from(await tx.overrides.maxFeePerGas);\n                fullCost.maxPriorityFeePerGas = ethers_1.BigNumber.from(await tx.overrides.maxPriorityFeePerGas);\n            }\n            return fullCost;\n        }\n        async _getWithdrawalLog(withdrawalHash, index = 0) {\n            const hash = ethers_1.ethers.utils.hexlify(withdrawalHash);\n            const receipt = await this._providerL2().getTransactionReceipt(hash);\n            const log = receipt.logs.filter((log) => log.address == utils_1.L1_MESSENGER_ADDRESS &&\n                log.topics[0] == ethers_1.ethers.utils.id(\"L1MessageSent(address,bytes32,bytes)\"))[index];\n            return {\n                log,\n                l1BatchTxId: receipt.l1BatchTxIndex,\n            };\n        }\n        async _getWithdrawalL2ToL1Log(withdrawalHash, index = 0) {\n            const hash = ethers_1.ethers.utils.hexlify(withdrawalHash);\n            const receipt = await this._providerL2().getTransactionReceipt(hash);\n            const messages = Array.from(receipt.l2ToL1Logs.entries()).filter(([_, log]) => log.sender == utils_1.L1_MESSENGER_ADDRESS);\n            const [l2ToL1LogIndex, l2ToL1Log] = messages[index];\n            return {\n                l2ToL1LogIndex,\n                l2ToL1Log,\n            };\n        }\n        async finalizeWithdrawalParams(withdrawalHash, index = 0) {\n            const { log, l1BatchTxId } = await this._getWithdrawalLog(withdrawalHash, index);\n            const { l2ToL1LogIndex } = await this._getWithdrawalL2ToL1Log(withdrawalHash, index);\n            const sender = ethers_1.ethers.utils.hexDataSlice(log.topics[1], 12);\n            const proof = await this._providerL2().getLogProof(withdrawalHash, l2ToL1LogIndex);\n            const message = ethers_1.ethers.utils.defaultAbiCoder.decode([\"bytes\"], log.data)[0];\n            return {\n                l1BatchNumber: log.l1BatchNumber,\n                l2MessageIndex: proof.id,\n                l2TxNumberInBlock: l1BatchTxId,\n                message,\n                sender,\n                proof: proof.proof,\n            };\n        }\n        async finalizeWithdrawal(withdrawalHash, index = 0, overrides) {\n            const { l1BatchNumber, l2MessageIndex, l2TxNumberInBlock, message, sender, proof } = await this.finalizeWithdrawalParams(withdrawalHash, index);\n            if ((0, utils_1.isETH)(sender)) {\n                const withdrawTo = ethers_1.ethers.utils.hexDataSlice(message, 4, 24);\n                const l1Bridges = await this.getL1BridgeContracts();\n                // If the destination address matches the address of the L1 WETH contract,\n                // the withdrawal request is processed through the WETH bridge.\n                if (withdrawTo.toLowerCase() == l1Bridges.weth.address.toLowerCase()) {\n                    return await l1Bridges.weth.finalizeWithdrawal(l1BatchNumber, l2MessageIndex, l2TxNumberInBlock, message, proof, overrides !== null && overrides !== void 0 ? overrides : {});\n                }\n                const contractAddress = await this._providerL2().getMainContractAddress();\n                const zksync = IZkSyncFactory_1.IZkSyncFactory.connect(contractAddress, this._signerL1());\n                return await zksync.finalizeEthWithdrawal(l1BatchNumber, l2MessageIndex, l2TxNumberInBlock, message, proof, overrides !== null && overrides !== void 0 ? overrides : {});\n            }\n            const l2Bridge = Il2BridgeFactory_1.Il2BridgeFactory.connect(sender, this._providerL2());\n            const l1Bridge = Il1BridgeFactory_1.Il1BridgeFactory.connect(await l2Bridge.l1Bridge(), this._signerL1());\n            return await l1Bridge.finalizeWithdrawal(l1BatchNumber, l2MessageIndex, l2TxNumberInBlock, message, proof, overrides !== null && overrides !== void 0 ? overrides : {});\n        }\n        async isWithdrawalFinalized(withdrawalHash, index = 0) {\n            const { log } = await this._getWithdrawalLog(withdrawalHash, index);\n            const { l2ToL1LogIndex } = await this._getWithdrawalL2ToL1Log(withdrawalHash, index);\n            const sender = ethers_1.ethers.utils.hexDataSlice(log.topics[1], 12);\n            // `getLogProof` is called not to get proof but\n            // to get the index of the corresponding L2->L1 log,\n            // which is returned as `proof.id`.\n            const proof = await this._providerL2().getLogProof(withdrawalHash, l2ToL1LogIndex);\n            if ((0, utils_1.isETH)(sender)) {\n                const contractAddress = await this._providerL2().getMainContractAddress();\n                const zksync = IZkSyncFactory_1.IZkSyncFactory.connect(contractAddress, this._signerL1());\n                return await zksync.isEthWithdrawalFinalized(log.l1BatchNumber, proof.id);\n            }\n            const l2Bridge = Il2BridgeFactory_1.Il2BridgeFactory.connect(sender, this._providerL2());\n            const l1Bridge = Il1BridgeFactory_1.Il1BridgeFactory.connect(await l2Bridge.l1Bridge(), this._providerL1());\n            return await l1Bridge.isWithdrawalFinalized(log.l1BatchNumber, proof.id);\n        }\n        async claimFailedDeposit(depositHash, overrides) {\n            const receipt = await this._providerL2().getTransactionReceipt(ethers_1.ethers.utils.hexlify(depositHash));\n            const successL2ToL1LogIndex = receipt.l2ToL1Logs.findIndex((l2ToL1log) => l2ToL1log.sender == utils_1.BOOTLOADER_FORMAL_ADDRESS && l2ToL1log.key == depositHash);\n            const successL2ToL1Log = receipt.l2ToL1Logs[successL2ToL1LogIndex];\n            if (successL2ToL1Log.value != ethers_1.ethers.constants.HashZero) {\n                throw new Error(\"Cannot claim successful deposit\");\n            }\n            const tx = await this._providerL2().getTransaction(ethers_1.ethers.utils.hexlify(depositHash));\n            // Undo the aliasing, since the Mailbox contract set it as for contract address.\n            const l1BridgeAddress = (0, utils_1.undoL1ToL2Alias)(receipt.from);\n            const l2BridgeAddress = receipt.to;\n            const l1Bridge = Il1BridgeFactory_1.Il1BridgeFactory.connect(l1BridgeAddress, this._signerL1());\n            const l2Bridge = Il2BridgeFactory_1.Il2BridgeFactory.connect(l2BridgeAddress, this._providerL2());\n            const calldata = l2Bridge.interface.decodeFunctionData(\"finalizeDeposit\", tx.data);\n            const proof = await this._providerL2().getLogProof(depositHash, successL2ToL1LogIndex);\n            return await l1Bridge.claimFailedDeposit(calldata[\"_l1Sender\"], calldata[\"_l1Token\"], depositHash, receipt.l1BatchNumber, proof.id, receipt.l1BatchTxIndex, proof.proof, overrides !== null && overrides !== void 0 ? overrides : {});\n        }\n        async requestExecute(transaction) {\n            const requestExecuteTx = await this.getRequestExecuteTx(transaction);\n            return this._providerL2().getPriorityOpResponse(await this._signerL1().sendTransaction(requestExecuteTx));\n        }\n        async estimateGasRequestExecute(transaction) {\n            const requestExecuteTx = await this.getRequestExecuteTx(transaction);\n            delete requestExecuteTx.gasPrice;\n            delete requestExecuteTx.maxFeePerGas;\n            delete requestExecuteTx.maxPriorityFeePerGas;\n            return this._providerL1().estimateGas(requestExecuteTx);\n        }\n        async getRequestExecuteTx(transaction) {\n            var _a, _b, _c, _d, _e, _f, _g, _h;\n            const zksyncContract = await this.getMainContract();\n            const { ...tx } = transaction;\n            (_a = tx.l2Value) !== null && _a !== void 0 ? _a : (tx.l2Value = ethers_1.BigNumber.from(0));\n            (_b = tx.operatorTip) !== null && _b !== void 0 ? _b : (tx.operatorTip = ethers_1.BigNumber.from(0));\n            (_c = tx.factoryDeps) !== null && _c !== void 0 ? _c : (tx.factoryDeps = []);\n            (_d = tx.overrides) !== null && _d !== void 0 ? _d : (tx.overrides = {});\n            (_e = tx.gasPerPubdataByte) !== null && _e !== void 0 ? _e : (tx.gasPerPubdataByte = utils_1.REQUIRED_L1_TO_L2_GAS_PER_PUBDATA_LIMIT);\n            (_f = tx.refundRecipient) !== null && _f !== void 0 ? _f : (tx.refundRecipient = await this.getAddress());\n            (_g = tx.l2GasLimit) !== null && _g !== void 0 ? _g : (tx.l2GasLimit = await this._providerL2().estimateL1ToL2Execute(transaction));\n            const { contractAddress, l2Value, calldata, l2GasLimit, factoryDeps, operatorTip, overrides, gasPerPubdataByte, refundRecipient, } = tx;\n            await insertGasPrice(this._providerL1(), overrides);\n            const gasPriceForEstimation = overrides.maxFeePerGas || overrides.gasPrice;\n            const baseCost = await this.getBaseCost({\n                gasPrice: await gasPriceForEstimation,\n                gasPerPubdataByte,\n                gasLimit: l2GasLimit,\n            });\n            (_h = overrides.value) !== null && _h !== void 0 ? _h : (overrides.value = baseCost.add(operatorTip).add(l2Value));\n            await (0, utils_1.checkBaseCost)(baseCost, overrides.value);\n            return await zksyncContract.populateTransaction.requestL2Transaction(contractAddress, l2Value, calldata, l2GasLimit, utils_1.REQUIRED_L1_TO_L2_GAS_PER_PUBDATA_LIMIT, factoryDeps, refundRecipient, overrides);\n        }\n    };\n}\nexports.AdapterL1 = AdapterL1;\nfunction AdapterL2(Base) {\n    return class Adapter extends Base {\n        _providerL2() {\n            throw new Error(\"Must be implemented by the derived class!\");\n        }\n        _signerL2() {\n            throw new Error(\"Must be implemented by the derived class!\");\n        }\n        async getBalance(token, blockTag = \"committed\") {\n            return await this._providerL2().getBalance(await this.getAddress(), blockTag, token);\n        }\n        async getAllBalances() {\n            return await this._providerL2().getAllAccountBalances(await this.getAddress());\n        }\n        async getDeploymentNonce() {\n            return await INonceHolderFactory_1.INonceHolderFactory.connect(utils_1.NONCE_HOLDER_ADDRESS, this._signerL2()).getDeploymentNonce(await this.getAddress());\n        }\n        async getL2BridgeContracts() {\n            const addresses = await this._providerL2().getDefaultBridgeAddresses();\n            return {\n                erc20: Il2BridgeFactory_1.Il2BridgeFactory.connect(addresses.erc20L2, this._signerL2()),\n                weth: Il2BridgeFactory_1.Il2BridgeFactory.connect(addresses.wethL2, this._signerL2()),\n            };\n        }\n        _fillCustomData(data) {\n            var _a, _b;\n            const customData = { ...data };\n            (_a = customData.gasPerPubdata) !== null && _a !== void 0 ? _a : (customData.gasPerPubdata = utils_1.DEFAULT_GAS_PER_PUBDATA_LIMIT);\n            (_b = customData.factoryDeps) !== null && _b !== void 0 ? _b : (customData.factoryDeps = []);\n            return customData;\n        }\n        async withdraw(transaction) {\n            const withdrawTx = await this._providerL2().getWithdrawTx({\n                from: await this.getAddress(),\n                ...transaction,\n            });\n            const txResponse = await this.sendTransaction(withdrawTx);\n            return this._providerL2()._wrapTransaction(txResponse);\n        }\n        async transfer(transaction) {\n            const transferTx = await this._providerL2().getTransferTx({\n                from: await this.getAddress(),\n                ...transaction,\n            });\n            const txResponse = await this.sendTransaction(transferTx);\n            return this._providerL2()._wrapTransaction(txResponse);\n        }\n    };\n}\nexports.AdapterL2 = AdapterL2;\n/// @dev This method checks if the overrides contain a gasPrice (or maxFeePerGas), if not it will insert\n/// the maxFeePerGas\nasync function insertGasPrice(l1Provider, overrides) {\n    if (!overrides.gasPrice && !overrides.maxFeePerGas) {\n        const l1FeeData = await l1Provider.getFeeData();\n        // Sometimes baseFeePerGas is not available, so we use gasPrice instead.\n        const baseFee = l1FeeData.lastBaseFeePerGas || l1FeeData.gasPrice;\n        // ethers.js by default uses multiplication by 2, but since the price for the L2 part\n        // will depend on the L1 part, doubling base fee is typically too much.\n        overrides.maxFeePerGas = baseFee.mul(3).div(2).add(l1FeeData.maxPriorityFeePerGas);\n        overrides.maxPriorityFeePerGas = l1FeeData.maxPriorityFeePerGas;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/zksync-ethers/build/src/adapters.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/zksync-ethers/build/src/contract.js":
/*!**********************************************************!*\
  !*** ./node_modules/zksync-ethers/build/src/contract.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ContractFactory = exports.Contract = void 0;\nconst ethers_1 = __webpack_require__(/*! ethers */ \"(ssr)/./node_modules/ethers/lib.esm/index.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/zksync-ethers/build/src/utils.js\");\nconst types_1 = __webpack_require__(/*! ./types */ \"(ssr)/./node_modules/zksync-ethers/build/src/types.js\");\nconst bytes_1 = __webpack_require__(/*! @ethersproject/bytes */ \"(ssr)/./node_modules/@ethersproject/bytes/lib.esm/index.js\");\nvar ethers_2 = __webpack_require__(/*! ethers */ \"(ssr)/./node_modules/ethers/lib.esm/index.js\");\nObject.defineProperty(exports, \"Contract\", ({ enumerable: true, get: function () { return ethers_2.Contract; } }));\nclass ContractFactory extends ethers_1.ethers.ContractFactory {\n    constructor(abi, bytecode, signer, deploymentType) {\n        super(abi, bytecode, signer);\n        this.deploymentType = deploymentType || \"create\";\n    }\n    encodeCalldata(salt, bytecodeHash, constructorCalldata) {\n        const contractDeploymentArgs = [salt, bytecodeHash, constructorCalldata];\n        const accountDeploymentArgs = [...contractDeploymentArgs, types_1.AccountAbstractionVersion.Version1];\n        if (this.deploymentType === \"create\") {\n            return utils_1.CONTRACT_DEPLOYER.encodeFunctionData(\"create\", [...contractDeploymentArgs]);\n        }\n        else if (this.deploymentType === \"createAccount\") {\n            return utils_1.CONTRACT_DEPLOYER.encodeFunctionData(\"createAccount\", [...accountDeploymentArgs]);\n        }\n        else if (this.deploymentType === \"create2\") {\n            return utils_1.CONTRACT_DEPLOYER.encodeFunctionData(\"create2\", [...contractDeploymentArgs]);\n        }\n        else if (this.deploymentType === \"create2Account\") {\n            return utils_1.CONTRACT_DEPLOYER.encodeFunctionData(\"create2Account\", [...accountDeploymentArgs]);\n        }\n        else {\n            throw new Error(`Unsupported deployment type ${this.deploymentType}`);\n        }\n    }\n    checkOverrides(overrides) {\n        if (this.deploymentType === \"create2\" || this.deploymentType === \"create2Account\") {\n            if (!overrides.customData || !overrides.customData.salt) {\n                throw new Error(\"Salt is required for CREATE2 deployment.\");\n            }\n            if (!overrides.customData.salt.startsWith(\"0x\") || overrides.customData.salt.length !== 66) {\n                throw new Error(\"Invalid salt provided.\");\n            }\n        }\n        if (overrides.customData &&\n            overrides.customData.factoryDeps != null &&\n            !Array.isArray(overrides.customData.factoryDeps)) {\n            throw new Error(\"Invalid 'factoryDeps' format. It should be an array of bytecodes.\");\n        }\n    }\n    getDeployTransaction(...args) {\n        var _a, _b, _c, _d, _e, _f;\n        var _g, _h, _j;\n        let constructorArgs;\n        let overrides = {\n            customData: { factoryDeps: [], salt: utils_1.ZERO_HASH },\n        };\n        // The overrides will be popped out in this call:\n        const txRequest = super.getDeployTransaction(...args);\n        if (this.interface.deploy.inputs.length + 1 == args.length) {\n            constructorArgs = args.slice(0, args.length - 1);\n            overrides = args[args.length - 1];\n            (_a = overrides.customData) !== null && _a !== void 0 ? _a : (overrides.customData = {});\n            (_b = (_g = overrides.customData).salt) !== null && _b !== void 0 ? _b : (_g.salt = utils_1.ZERO_HASH);\n            this.checkOverrides(overrides);\n            overrides.customData.factoryDeps = ((_c = overrides.customData.factoryDeps) !== null && _c !== void 0 ? _c : []).map(normalizeBytecode);\n        }\n        else {\n            constructorArgs = args;\n        }\n        const bytecodeHash = (0, utils_1.hashBytecode)(this.bytecode);\n        const constructorCalldata = ethers_1.utils.arrayify(this.interface.encodeDeploy(constructorArgs));\n        const deployCalldata = this.encodeCalldata(overrides.customData.salt, bytecodeHash, constructorCalldata);\n        // salt is no longer used and should not be present in customData of EIP712 transaction\n        if (txRequest.customData && txRequest.customData.salt)\n            delete txRequest.customData.salt;\n        const tx = {\n            ...txRequest,\n            to: utils_1.CONTRACT_DEPLOYER_ADDRESS,\n            data: deployCalldata,\n            type: utils_1.EIP712_TX_TYPE,\n        };\n        (_d = tx.customData) !== null && _d !== void 0 ? _d : (tx.customData = {});\n        (_e = (_h = tx.customData).factoryDeps) !== null && _e !== void 0 ? _e : (_h.factoryDeps = overrides.customData.factoryDeps || []);\n        (_f = (_j = tx.customData).gasPerPubdata) !== null && _f !== void 0 ? _f : (_j.gasPerPubdata = utils_1.DEFAULT_GAS_PER_PUBDATA_LIMIT);\n        // The number of factory deps is relatively low, so it is efficient enough.\n        if (!tx.customData || !tx.customData.factoryDeps.includes(this.bytecode)) {\n            tx.customData.factoryDeps.push(this.bytecode);\n        }\n        return tx;\n    }\n    /**\n     * Deploys a new contract or account instance on the Ethereum blockchain.\n     *\n     * @async\n     * @param {...Array<any>} args - Constructor arguments for the contract followed by optional\n     * {@link ethers.PayableOverrides|overrides}. When deploying with CREATE2 opcode slat must be present in overrides.\n     *\n     *\n     * @example\n     * // Deploy with constructor arguments only using CREATE opcode\n     * const deployedContract = await contractFactory.deploy(arg1, arg2, ...);\n     *\n     * // Deploy with constructor arguments, and factory dependencies using CREATE opcode\n     * const deployedContractWithSaltAndDeps = await contractFactory.deploy(arg1, arg2, ..., {\n     *   customData: {\n     *     factoryDeps: ['0x...']\n     *   }\n     * });\n     *\n     * // Deploy with constructor arguments and custom salt using CREATE2 opcode\n     * const deployedContractWithSalt = await contractFactory.deploy(arg1, arg2, ..., {\n     *   customData: {\n     *     salt: '0x...'\n     *   }\n     * });\n     *\n     * // Deploy with constructor arguments, custom salt, and factory dependencies using CREATE2 opcode\n     * const deployedContractWithSaltAndDeps = await contractFactory.deploy(arg1, arg2, ..., {\n     *   customData: {\n     *     salt: '0x...',\n     *     factoryDeps: ['0x...']\n     *   }\n     * });\n     */\n    async deploy(...args) {\n        const contract = await super.deploy(...args);\n        const deployTxReceipt = await contract.deployTransaction.wait();\n        const deployedAddresses = (0, utils_1.getDeployedContracts)(deployTxReceipt).map((info) => info.deployedAddress);\n        const contractWithCorrectAddress = new ethers_1.ethers.Contract(deployedAddresses[deployedAddresses.length - 1], contract.interface, contract.signer);\n        ethers_1.utils.defineReadOnly(contractWithCorrectAddress, \"deployTransaction\", contract.deployTransaction);\n        return contractWithCorrectAddress;\n    }\n}\nexports.ContractFactory = ContractFactory;\nfunction normalizeBytecode(bytecode) {\n    let bytecodeHex = null;\n    if (typeof bytecode === \"string\") {\n        bytecodeHex = bytecode;\n    }\n    else if ((0, bytes_1.isBytes)(bytecode)) {\n        bytecodeHex = (0, bytes_1.hexlify)(bytecode);\n    }\n    else if (bytecode && typeof bytecode.object === \"string\") {\n        // Allow the bytecode object from the Solidity compiler\n        bytecodeHex = bytecode.object;\n    }\n    else {\n        // Crash in the next verification step\n        bytecodeHex = \"!\";\n    }\n    // Make sure it is 0x prefixed\n    if (bytecodeHex.substring(0, 2) !== \"0x\") {\n        bytecodeHex = \"0x\" + bytecodeHex;\n    }\n    // Make sure the final result is valid bytecode\n    if (!(0, bytes_1.isHexString)(bytecodeHex) || bytecodeHex.length % 2) {\n        throw new Error(\"invalid bytecode\");\n    }\n    return bytecodeHex;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/zksync-ethers/build/src/contract.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/zksync-ethers/build/src/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/zksync-ethers/build/src/index.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Contract = exports.ContractFactory = exports.Provider = exports.Web3Provider = exports.Wallet = exports.L1Signer = exports.Signer = exports.EIP712Signer = exports.types = exports.utils = void 0;\nexports.utils = __importStar(__webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/zksync-ethers/build/src/utils.js\"));\nexports.types = __importStar(__webpack_require__(/*! ./types */ \"(ssr)/./node_modules/zksync-ethers/build/src/types.js\"));\nvar signer_1 = __webpack_require__(/*! ./signer */ \"(ssr)/./node_modules/zksync-ethers/build/src/signer.js\");\nObject.defineProperty(exports, \"EIP712Signer\", ({ enumerable: true, get: function () { return signer_1.EIP712Signer; } }));\nObject.defineProperty(exports, \"Signer\", ({ enumerable: true, get: function () { return signer_1.Signer; } }));\nObject.defineProperty(exports, \"L1Signer\", ({ enumerable: true, get: function () { return signer_1.L1Signer; } }));\nvar wallet_1 = __webpack_require__(/*! ./wallet */ \"(ssr)/./node_modules/zksync-ethers/build/src/wallet.js\");\nObject.defineProperty(exports, \"Wallet\", ({ enumerable: true, get: function () { return wallet_1.Wallet; } }));\nvar provider_1 = __webpack_require__(/*! ./provider */ \"(ssr)/./node_modules/zksync-ethers/build/src/provider.js\");\nObject.defineProperty(exports, \"Web3Provider\", ({ enumerable: true, get: function () { return provider_1.Web3Provider; } }));\nObject.defineProperty(exports, \"Provider\", ({ enumerable: true, get: function () { return provider_1.Provider; } }));\nvar contract_1 = __webpack_require__(/*! ./contract */ \"(ssr)/./node_modules/zksync-ethers/build/src/contract.js\");\nObject.defineProperty(exports, \"ContractFactory\", ({ enumerable: true, get: function () { return contract_1.ContractFactory; } }));\nObject.defineProperty(exports, \"Contract\", ({ enumerable: true, get: function () { return contract_1.Contract; } }));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvemtzeW5jLWV0aGVycy9idWlsZC9zcmMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsb0NBQW9DO0FBQ25EO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLDBDQUEwQyw0QkFBNEI7QUFDdEUsQ0FBQztBQUNEO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGdCQUFnQixHQUFHLHVCQUF1QixHQUFHLGdCQUFnQixHQUFHLG9CQUFvQixHQUFHLGNBQWMsR0FBRyxnQkFBZ0IsR0FBRyxjQUFjLEdBQUcsb0JBQW9CLEdBQUcsYUFBYSxHQUFHLGFBQWE7QUFDaE0sYUFBYSxnQkFBZ0IsbUJBQU8sQ0FBQyxzRUFBUztBQUM5QyxhQUFhLGdCQUFnQixtQkFBTyxDQUFDLHNFQUFTO0FBQzlDLGVBQWUsbUJBQU8sQ0FBQyx3RUFBVTtBQUNqQyxnREFBK0MsRUFBRSxxQ0FBcUMsaUNBQWlDLEVBQUM7QUFDeEgsMENBQXlDLEVBQUUscUNBQXFDLDJCQUEyQixFQUFDO0FBQzVHLDRDQUEyQyxFQUFFLHFDQUFxQyw2QkFBNkIsRUFBQztBQUNoSCxlQUFlLG1CQUFPLENBQUMsd0VBQVU7QUFDakMsMENBQXlDLEVBQUUscUNBQXFDLDJCQUEyQixFQUFDO0FBQzVHLGlCQUFpQixtQkFBTyxDQUFDLDRFQUFZO0FBQ3JDLGdEQUErQyxFQUFFLHFDQUFxQyxtQ0FBbUMsRUFBQztBQUMxSCw0Q0FBMkMsRUFBRSxxQ0FBcUMsK0JBQStCLEVBQUM7QUFDbEgsaUJBQWlCLG1CQUFPLENBQUMsNEVBQVk7QUFDckMsbURBQWtELEVBQUUscUNBQXFDLHNDQUFzQyxFQUFDO0FBQ2hJLDRDQUEyQyxFQUFFLHFDQUFxQywrQkFBK0IsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3NtYXJ0LXdhbGxldC1jbGllbnQvLi9ub2RlX21vZHVsZXMvemtzeW5jLWV0aGVycy9idWlsZC9zcmMvaW5kZXguanM/MDg2OSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19zZXRNb2R1bGVEZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX3NldE1vZHVsZURlZmF1bHQpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgXCJkZWZhdWx0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHYgfSk7XG59KSA6IGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBvW1wiZGVmYXVsdFwiXSA9IHY7XG59KTtcbnZhciBfX2ltcG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0U3RhcikgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChrICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrKTtcbiAgICBfX3NldE1vZHVsZURlZmF1bHQocmVzdWx0LCBtb2QpO1xuICAgIHJldHVybiByZXN1bHQ7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Db250cmFjdCA9IGV4cG9ydHMuQ29udHJhY3RGYWN0b3J5ID0gZXhwb3J0cy5Qcm92aWRlciA9IGV4cG9ydHMuV2ViM1Byb3ZpZGVyID0gZXhwb3J0cy5XYWxsZXQgPSBleHBvcnRzLkwxU2lnbmVyID0gZXhwb3J0cy5TaWduZXIgPSBleHBvcnRzLkVJUDcxMlNpZ25lciA9IGV4cG9ydHMudHlwZXMgPSBleHBvcnRzLnV0aWxzID0gdm9pZCAwO1xuZXhwb3J0cy51dGlscyA9IF9faW1wb3J0U3RhcihyZXF1aXJlKFwiLi91dGlsc1wiKSk7XG5leHBvcnRzLnR5cGVzID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCIuL3R5cGVzXCIpKTtcbnZhciBzaWduZXJfMSA9IHJlcXVpcmUoXCIuL3NpZ25lclwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkVJUDcxMlNpZ25lclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gc2lnbmVyXzEuRUlQNzEyU2lnbmVyOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiU2lnbmVyXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBzaWduZXJfMS5TaWduZXI7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJMMVNpZ25lclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gc2lnbmVyXzEuTDFTaWduZXI7IH0gfSk7XG52YXIgd2FsbGV0XzEgPSByZXF1aXJlKFwiLi93YWxsZXRcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJXYWxsZXRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHdhbGxldF8xLldhbGxldDsgfSB9KTtcbnZhciBwcm92aWRlcl8xID0gcmVxdWlyZShcIi4vcHJvdmlkZXJcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJXZWIzUHJvdmlkZXJcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHByb3ZpZGVyXzEuV2ViM1Byb3ZpZGVyOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiUHJvdmlkZXJcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHByb3ZpZGVyXzEuUHJvdmlkZXI7IH0gfSk7XG52YXIgY29udHJhY3RfMSA9IHJlcXVpcmUoXCIuL2NvbnRyYWN0XCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQ29udHJhY3RGYWN0b3J5XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjb250cmFjdF8xLkNvbnRyYWN0RmFjdG9yeTsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkNvbnRyYWN0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjb250cmFjdF8xLkNvbnRyYWN0OyB9IH0pO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/zksync-ethers/build/src/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/zksync-ethers/build/src/paymaster-utils.js":
/*!*****************************************************************!*\
  !*** ./node_modules/zksync-ethers/build/src/paymaster-utils.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getPaymasterParams = exports.getGeneralPaymasterInput = exports.getApprovalBasedPaymasterInput = exports.PAYMASTER_FLOW_ABI = void 0;\nconst ethers_1 = __webpack_require__(/*! ethers */ \"(ssr)/./node_modules/ethers/lib.esm/index.js\");\nexports.PAYMASTER_FLOW_ABI = new ethers_1.ethers.utils.Interface(__webpack_require__(/*! ../abi/IPaymasterFlow.json */ \"(ssr)/./node_modules/zksync-ethers/build/abi/IPaymasterFlow.json\"));\nfunction getApprovalBasedPaymasterInput(paymasterInput) {\n    return exports.PAYMASTER_FLOW_ABI.encodeFunctionData(\"approvalBased\", [\n        paymasterInput.token,\n        paymasterInput.minimalAllowance,\n        paymasterInput.innerInput,\n    ]);\n}\nexports.getApprovalBasedPaymasterInput = getApprovalBasedPaymasterInput;\nfunction getGeneralPaymasterInput(paymasterInput) {\n    return exports.PAYMASTER_FLOW_ABI.encodeFunctionData(\"general\", [paymasterInput.innerInput]);\n}\nexports.getGeneralPaymasterInput = getGeneralPaymasterInput;\nfunction getPaymasterParams(paymasterAddress, paymasterInput) {\n    if (paymasterInput.type == \"General\") {\n        return {\n            paymaster: paymasterAddress,\n            paymasterInput: getGeneralPaymasterInput(paymasterInput),\n        };\n    }\n    else {\n        return {\n            paymaster: paymasterAddress,\n            paymasterInput: getApprovalBasedPaymasterInput(paymasterInput),\n        };\n    }\n}\nexports.getPaymasterParams = getPaymasterParams;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvemtzeW5jLWV0aGVycy9idWlsZC9zcmMvcGF5bWFzdGVyLXV0aWxzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDBCQUEwQixHQUFHLGdDQUFnQyxHQUFHLHNDQUFzQyxHQUFHLDBCQUEwQjtBQUNuSSxpQkFBaUIsbUJBQU8sQ0FBQyw0REFBUTtBQUNqQywwQkFBMEIsdUNBQXVDLG1CQUFPLENBQUMsb0dBQTRCO0FBQ3JHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQztBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc21hcnQtd2FsbGV0LWNsaWVudC8uL25vZGVfbW9kdWxlcy96a3N5bmMtZXRoZXJzL2J1aWxkL3NyYy9wYXltYXN0ZXItdXRpbHMuanM/ZDNmYiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ2V0UGF5bWFzdGVyUGFyYW1zID0gZXhwb3J0cy5nZXRHZW5lcmFsUGF5bWFzdGVySW5wdXQgPSBleHBvcnRzLmdldEFwcHJvdmFsQmFzZWRQYXltYXN0ZXJJbnB1dCA9IGV4cG9ydHMuUEFZTUFTVEVSX0ZMT1dfQUJJID0gdm9pZCAwO1xuY29uc3QgZXRoZXJzXzEgPSByZXF1aXJlKFwiZXRoZXJzXCIpO1xuZXhwb3J0cy5QQVlNQVNURVJfRkxPV19BQkkgPSBuZXcgZXRoZXJzXzEuZXRoZXJzLnV0aWxzLkludGVyZmFjZShyZXF1aXJlKFwiLi4vYWJpL0lQYXltYXN0ZXJGbG93Lmpzb25cIikpO1xuZnVuY3Rpb24gZ2V0QXBwcm92YWxCYXNlZFBheW1hc3RlcklucHV0KHBheW1hc3RlcklucHV0KSB7XG4gICAgcmV0dXJuIGV4cG9ydHMuUEFZTUFTVEVSX0ZMT1dfQUJJLmVuY29kZUZ1bmN0aW9uRGF0YShcImFwcHJvdmFsQmFzZWRcIiwgW1xuICAgICAgICBwYXltYXN0ZXJJbnB1dC50b2tlbixcbiAgICAgICAgcGF5bWFzdGVySW5wdXQubWluaW1hbEFsbG93YW5jZSxcbiAgICAgICAgcGF5bWFzdGVySW5wdXQuaW5uZXJJbnB1dCxcbiAgICBdKTtcbn1cbmV4cG9ydHMuZ2V0QXBwcm92YWxCYXNlZFBheW1hc3RlcklucHV0ID0gZ2V0QXBwcm92YWxCYXNlZFBheW1hc3RlcklucHV0O1xuZnVuY3Rpb24gZ2V0R2VuZXJhbFBheW1hc3RlcklucHV0KHBheW1hc3RlcklucHV0KSB7XG4gICAgcmV0dXJuIGV4cG9ydHMuUEFZTUFTVEVSX0ZMT1dfQUJJLmVuY29kZUZ1bmN0aW9uRGF0YShcImdlbmVyYWxcIiwgW3BheW1hc3RlcklucHV0LmlubmVySW5wdXRdKTtcbn1cbmV4cG9ydHMuZ2V0R2VuZXJhbFBheW1hc3RlcklucHV0ID0gZ2V0R2VuZXJhbFBheW1hc3RlcklucHV0O1xuZnVuY3Rpb24gZ2V0UGF5bWFzdGVyUGFyYW1zKHBheW1hc3RlckFkZHJlc3MsIHBheW1hc3RlcklucHV0KSB7XG4gICAgaWYgKHBheW1hc3RlcklucHV0LnR5cGUgPT0gXCJHZW5lcmFsXCIpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHBheW1hc3RlcjogcGF5bWFzdGVyQWRkcmVzcyxcbiAgICAgICAgICAgIHBheW1hc3RlcklucHV0OiBnZXRHZW5lcmFsUGF5bWFzdGVySW5wdXQocGF5bWFzdGVySW5wdXQpLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHBheW1hc3RlcjogcGF5bWFzdGVyQWRkcmVzcyxcbiAgICAgICAgICAgIHBheW1hc3RlcklucHV0OiBnZXRBcHByb3ZhbEJhc2VkUGF5bWFzdGVySW5wdXQocGF5bWFzdGVySW5wdXQpLFxuICAgICAgICB9O1xuICAgIH1cbn1cbmV4cG9ydHMuZ2V0UGF5bWFzdGVyUGFyYW1zID0gZ2V0UGF5bWFzdGVyUGFyYW1zO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/zksync-ethers/build/src/paymaster-utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/zksync-ethers/build/src/provider.js":
/*!**********************************************************!*\
  !*** ./node_modules/zksync-ethers/build/src/provider.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Web3Provider = exports.Provider = void 0;\nconst ethers_1 = __webpack_require__(/*! ethers */ \"(ssr)/./node_modules/ethers/lib.esm/index.js\");\nconst web_1 = __webpack_require__(/*! @ethersproject/web */ \"(ssr)/./node_modules/@ethersproject/web/lib.esm/index.js\");\nconst Ierc20Factory_1 = __webpack_require__(/*! ../typechain/Ierc20Factory */ \"(ssr)/./node_modules/zksync-ethers/build/typechain/Ierc20Factory.js\");\nconst IEthTokenFactory_1 = __webpack_require__(/*! ../typechain/IEthTokenFactory */ \"(ssr)/./node_modules/zksync-ethers/build/typechain/IEthTokenFactory.js\");\nconst Il2BridgeFactory_1 = __webpack_require__(/*! ../typechain/Il2BridgeFactory */ \"(ssr)/./node_modules/zksync-ethers/build/typechain/Il2BridgeFactory.js\");\nconst types_1 = __webpack_require__(/*! ./types */ \"(ssr)/./node_modules/zksync-ethers/build/src/types.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/zksync-ethers/build/src/utils.js\");\nconst signer_1 = __webpack_require__(/*! ./signer */ \"(ssr)/./node_modules/zksync-ethers/build/src/signer.js\");\nvar Formatter = ethers_1.providers.Formatter;\nlet defaultFormatter = null;\nclass Provider extends ethers_1.ethers.providers.JsonRpcProvider {\n    // NOTE: this is almost a complete copy-paste of the parent poll method\n    // https://github.com/ethers-io/ethers.js/blob/v5.7.2/packages/providers/src.ts/base-provider.ts#L977\n    // The only difference is that we handle transaction receipts with `blockNumber: null` differently here.\n    async poll() {\n        const pollId = Provider._nextPollId++;\n        // Track all running promises, so we can trigger a post-poll once they are complete\n        const runners = [];\n        let blockNumber = null;\n        try {\n            blockNumber = await this._getInternalBlockNumber(100 + this.pollingInterval / 2);\n        } catch (error) {\n            this.emit(\"error\", error);\n            return;\n        }\n        this._setFastBlockNumber(blockNumber);\n        // Emit a poll event after we have the latest (fast) block number\n        this.emit(\"poll\", pollId, blockNumber);\n        // If the block has not changed, meh.\n        if (blockNumber === this._lastBlockNumber) {\n            this.emit(\"didPoll\", pollId);\n            return;\n        }\n        // First polling cycle, trigger a \"block\" events\n        if (this._emitted.block === -2) {\n            this._emitted.block = blockNumber - 1;\n        }\n        if (Math.abs(this._emitted.block - blockNumber) > 1000) {\n            console.warn(`network block skew detected; skipping block events (emitted=${this._emitted.block} blockNumber=${blockNumber})`);\n            this.emit(\"error\", {\n                blockNumber: blockNumber,\n                event: \"blockSkew\",\n                previousBlockNumber: this._emitted.block\n            });\n            this.emit(\"block\", blockNumber);\n        } else {\n            // Notify all listener for each block that has passed\n            for(let i = this._emitted.block + 1; i <= blockNumber; i++){\n                this.emit(\"block\", i);\n            }\n        }\n        // The emitted block was updated, check for obsolete events\n        if (this._emitted.block !== blockNumber) {\n            this._emitted.block = blockNumber;\n            Object.keys(this._emitted).forEach((key)=>{\n                // The block event does not expire\n                if (key === \"block\") {\n                    return;\n                }\n                // The block we were at when we emitted this event\n                const eventBlockNumber = this._emitted[key];\n                // We cannot garbage collect pending transactions or blocks here\n                // They should be garbage collected by the Provider when setting\n                // \"pending\" events\n                if (eventBlockNumber === \"pending\") {\n                    return;\n                }\n                // Evict any transaction hashes or block hashes over 12 blocks\n                // old, since they should not return null anyway\n                if (blockNumber - eventBlockNumber > 12) {\n                    delete this._emitted[key];\n                }\n            });\n        }\n        // First polling cycle\n        if (this._lastBlockNumber === -2) {\n            this._lastBlockNumber = blockNumber - 1;\n        }\n        // Find all transaction hashes we are waiting on\n        this._events.forEach((event)=>{\n            switch(event.type){\n                case \"tx\":\n                    {\n                        const hash = event.hash;\n                        let runner = this.getTransactionReceipt(hash).then((receipt)=>{\n                            if (!receipt) {\n                                return null;\n                            }\n                            // NOTE: receipts with blockNumber == null are OK.\n                            // this means they were rejected in state-keeper or replaced in mempool.\n                            // But we still check that they were actually rejected.\n                            if (receipt.blockNumber == null && !(receipt.status != null && ethers_1.BigNumber.from(receipt.status).isZero())) {\n                                return null;\n                            }\n                            this._emitted[\"t:\" + hash] = receipt.blockNumber;\n                            this.emit(hash, receipt);\n                            return null;\n                        }).catch((error)=>{\n                            this.emit(\"error\", error);\n                        });\n                        runners.push(runner);\n                        break;\n                    }\n                case \"filter\":\n                    {\n                        // We only allow a single getLogs to be in-flight at a time\n                        if (!event._inflight) {\n                            event._inflight = true;\n                            // This is the first filter for this event, so we want to\n                            // restrict events to events that happened no earlier than now\n                            if (event._lastBlockNumber === -2) {\n                                event._lastBlockNumber = blockNumber - 1;\n                            }\n                            // Filter from the last *known* event; due to load-balancing\n                            // and some nodes returning updated block numbers before\n                            // indexing events, a logs result with 0 entries cannot be\n                            // trusted, and we must retry a range which includes it again\n                            const filter = event.filter;\n                            filter.fromBlock = event._lastBlockNumber + 1;\n                            filter.toBlock = blockNumber;\n                            // Prevent file ranges from growing too wild, since it is quite\n                            // likely there just haven't been any events to move the lastBlockNumber.\n                            const minFromBlock = filter.toBlock - this._maxFilterBlockRange;\n                            if (minFromBlock > filter.fromBlock) {\n                                filter.fromBlock = minFromBlock;\n                            }\n                            if (filter.fromBlock < 0) {\n                                filter.fromBlock = 0;\n                            }\n                            const runner = this.getLogs(filter).then((logs)=>{\n                                // Allow the next getLogs\n                                event._inflight = false;\n                                if (logs.length === 0) {\n                                    return;\n                                }\n                                logs.forEach((log)=>{\n                                    // Only when we get an event for a given block number\n                                    // can we trust the events are indexed\n                                    if (log.blockNumber > event._lastBlockNumber) {\n                                        event._lastBlockNumber = log.blockNumber;\n                                    }\n                                    // Make sure we stall requests to fetch blocks and txs\n                                    this._emitted[\"b:\" + log.blockHash] = log.blockNumber;\n                                    this._emitted[\"t:\" + log.transactionHash] = log.blockNumber;\n                                    this.emit(filter, log);\n                                });\n                            }).catch((error)=>{\n                                this.emit(\"error\", error);\n                                // Allow another getLogs (the range was not updated)\n                                event._inflight = false;\n                            });\n                            runners.push(runner);\n                        }\n                        break;\n                    }\n            }\n        });\n        this._lastBlockNumber = blockNumber;\n        // Once all events for this loop have been processed, emit \"didPoll\"\n        Promise.all(runners).then(()=>{\n            this.emit(\"didPoll\", pollId);\n        }).catch((error)=>{\n            this.emit(\"error\", error);\n        });\n        return;\n    }\n    async getTransactionReceipt(transactionHash) {\n        await this.getNetwork();\n        transactionHash = await transactionHash;\n        const params = {\n            transactionHash: this.formatter.hash(transactionHash, true)\n        };\n        return (0, web_1.poll)(async ()=>{\n            const result = await this.perform(\"getTransactionReceipt\", params);\n            if (result == null) {\n                if (this._emitted[\"t:\" + transactionHash] === undefined) {\n                    return null;\n                }\n                return undefined;\n            }\n            if (result.blockNumber == null && result.status != null && ethers_1.BigNumber.from(result.status).isZero()) {\n                // transaction is rejected in the state-keeper\n                return {\n                    ...this.formatter.receipt({\n                        ...result,\n                        confirmations: 1,\n                        blockNumber: 0,\n                        blockHash: ethers_1.ethers.constants.HashZero\n                    }),\n                    blockNumber: null,\n                    blockHash: null,\n                    l1BatchNumber: null,\n                    l1BatchTxIndex: null\n                };\n            }\n            if (result.blockHash == null) {\n                // receipt is not ready\n                return undefined;\n            } else {\n                const receipt = this.formatter.receipt(result);\n                if (receipt.blockNumber == null) {\n                    receipt.confirmations = 0;\n                } else if (receipt.confirmations == null) {\n                    const blockNumber = await this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n                    // Add the confirmations using the fast block number (pessimistic)\n                    let confirmations = blockNumber - receipt.blockNumber + 1;\n                    if (confirmations <= 0) {\n                        confirmations = 1;\n                    }\n                    receipt.confirmations = confirmations;\n                }\n                return receipt;\n            }\n        }, {\n            oncePoll: this\n        });\n    }\n    async getBlock(blockHashOrBlockTag) {\n        return this._getBlock(blockHashOrBlockTag, false);\n    }\n    async getBlockWithTransactions(blockHashOrBlockTag) {\n        return this._getBlock(blockHashOrBlockTag, true);\n    }\n    static getFormatter() {\n        if (defaultFormatter == null) {\n            defaultFormatter = new Formatter();\n            const number = defaultFormatter.number.bind(defaultFormatter);\n            const boolean = defaultFormatter.boolean.bind(defaultFormatter);\n            const hash = defaultFormatter.hash.bind(defaultFormatter);\n            const address = defaultFormatter.address.bind(defaultFormatter);\n            defaultFormatter.formats.receiptLog.l1BatchNumber = Formatter.allowNull(number);\n            defaultFormatter.formats.l2Tol1Log = {\n                blockNumber: number,\n                blockHash: hash,\n                l1BatchNumber: Formatter.allowNull(number),\n                transactionIndex: number,\n                shardId: number,\n                isService: boolean,\n                sender: address,\n                key: hash,\n                value: hash,\n                transactionHash: hash,\n                txIndexInL1Batch: Formatter.allowNull(number),\n                logIndex: number\n            };\n            defaultFormatter.formats.receipt.l1BatchNumber = Formatter.allowNull(number);\n            defaultFormatter.formats.receipt.l1BatchTxIndex = Formatter.allowNull(number);\n            defaultFormatter.formats.receipt.l2ToL1Logs = Formatter.arrayOf((value)=>Formatter.check(defaultFormatter.formats.l2Tol1Log, value));\n            defaultFormatter.formats.block.l1BatchNumber = Formatter.allowNull(number);\n            defaultFormatter.formats.block.l1BatchTimestamp = Formatter.allowNull(number);\n            defaultFormatter.formats.blockWithTransactions.l1BatchNumber = Formatter.allowNull(number);\n            defaultFormatter.formats.blockWithTransactions.l1BatchTimestamp = Formatter.allowNull(number);\n            defaultFormatter.formats.transaction.l1BatchNumber = Formatter.allowNull(number);\n            defaultFormatter.formats.transaction.l1BatchTxIndex = Formatter.allowNull(number);\n            defaultFormatter.formats.filterLog.l1BatchNumber = Formatter.allowNull(number);\n        }\n        return defaultFormatter;\n    }\n    async getBalance(address, blockTag, tokenAddress) {\n        const tag = this.formatter.blockTag(blockTag);\n        if (tokenAddress == null || (0, utils_1.isETH)(tokenAddress)) {\n            // requesting ETH balance\n            return await super.getBalance(address, tag);\n        } else {\n            try {\n                let token = Ierc20Factory_1.Ierc20Factory.connect(tokenAddress, this);\n                return await token.balanceOf(address, {\n                    blockTag: tag\n                });\n            } catch  {\n                return ethers_1.BigNumber.from(0);\n            }\n        }\n    }\n    async l2TokenAddress(token) {\n        if (token == utils_1.ETH_ADDRESS) {\n            return utils_1.ETH_ADDRESS;\n        }\n        const bridgeAddresses = await this.getDefaultBridgeAddresses();\n        const l2WethBridge = Il2BridgeFactory_1.Il2BridgeFactory.connect(bridgeAddresses.wethL2, this);\n        try {\n            const l2WethToken = await l2WethBridge.l2TokenAddress(token);\n            // If the token is Wrapped Ether, return its L2 token address\n            if (l2WethToken != ethers_1.ethers.constants.AddressZero) {\n                return l2WethToken;\n            }\n        } catch (e) {}\n        const l2Erc20Bridge = Il2BridgeFactory_1.Il2BridgeFactory.connect(bridgeAddresses.erc20L2, this);\n        return await l2Erc20Bridge.l2TokenAddress(token);\n    }\n    async l1TokenAddress(token) {\n        if (token == utils_1.ETH_ADDRESS) {\n            return utils_1.ETH_ADDRESS;\n        }\n        const bridgeAddresses = await this.getDefaultBridgeAddresses();\n        const l2WethBridge = Il2BridgeFactory_1.Il2BridgeFactory.connect(bridgeAddresses.wethL2, this);\n        try {\n            const l1WethToken = await l2WethBridge.l1TokenAddress(token);\n            // If the token is Wrapped Ether, return its L1 token address\n            if (l1WethToken != ethers_1.ethers.constants.AddressZero) {\n                return l1WethToken;\n            }\n        } catch (e) {}\n        const erc20Bridge = Il2BridgeFactory_1.Il2BridgeFactory.connect(bridgeAddresses.erc20L2, this);\n        return await erc20Bridge.l1TokenAddress(token);\n    }\n    // This function is used when formatting requests for\n    // eth_call and eth_estimateGas. We override it here\n    // because we have extra stuff to serialize (customData).\n    // This function is for internal use only.\n    static hexlifyTransaction(transaction, allowExtra) {\n        var _a;\n        const result = ethers_1.ethers.providers.JsonRpcProvider.hexlifyTransaction(transaction, {\n            ...allowExtra,\n            customData: true,\n            from: true\n        });\n        if (transaction.customData == null) {\n            return result;\n        }\n        result.eip712Meta = {\n            gasPerPubdata: ethers_1.utils.hexValue((_a = transaction.customData.gasPerPubdata) !== null && _a !== void 0 ? _a : 0)\n        };\n        transaction.type = utils_1.EIP712_TX_TYPE;\n        if (transaction.customData.factoryDeps) {\n            // @ts-ignore\n            result.eip712Meta.factoryDeps = transaction.customData.factoryDeps.map((dep)=>// TODO (SMA-1605): we arraify instead of hexlifying because server expects Vec<u8>.\n                //  We should change deserialization there.\n                Array.from(ethers_1.utils.arrayify(dep)));\n        }\n        if (transaction.customData.paymasterParams) {\n            // @ts-ignore\n            result.eip712Meta.paymasterParams = {\n                paymaster: ethers_1.utils.hexlify(transaction.customData.paymasterParams.paymaster),\n                paymasterInput: Array.from(ethers_1.utils.arrayify(transaction.customData.paymasterParams.paymasterInput))\n            };\n        }\n        return result;\n    }\n    async estimateGas(transaction) {\n        await this.getNetwork();\n        const params = await ethers_1.utils.resolveProperties({\n            transaction: this._getTransactionRequest(transaction)\n        });\n        if (transaction.customData != null) {\n            // @ts-ignore\n            params.transaction.customData = transaction.customData;\n        }\n        const result = await this.perform(\"estimateGas\", params);\n        try {\n            return ethers_1.BigNumber.from(result);\n        } catch (error) {\n            throw new Error(`bad result from backend (estimateGas): ${result}`);\n        }\n    }\n    async estimateGasL1(transaction) {\n        await this.getNetwork();\n        const params = await ethers_1.utils.resolveProperties({\n            transaction: this._getTransactionRequest(transaction)\n        });\n        if (transaction.customData != null) {\n            // @ts-ignore\n            params.transaction.customData = transaction.customData;\n        }\n        const result = await this.send(\"zks_estimateGasL1ToL2\", [\n            Provider.hexlifyTransaction(params.transaction, {\n                from: true\n            })\n        ]);\n        try {\n            return ethers_1.BigNumber.from(result);\n        } catch (error) {\n            throw new Error(`bad result from backend (zks_estimateGasL1ToL2): ${result}`);\n        }\n    }\n    async estimateFee(transaction) {\n        return await this.send(\"zks_estimateFee\", [\n            transaction\n        ]);\n    }\n    async getGasPrice(token) {\n        const params = token ? [\n            token\n        ] : [];\n        const price = await this.send(\"eth_gasPrice\", params);\n        return ethers_1.BigNumber.from(price);\n    }\n    constructor(url, network){\n        super(url, network);\n        this.pollingInterval = 500;\n        const blockTag = this.formatter.blockTag.bind(this.formatter);\n        this.formatter.blockTag = (tag)=>{\n            if (tag == \"committed\" || tag == \"finalized\") {\n                return tag;\n            }\n            return blockTag(tag);\n        };\n        this.contractAddresses = {};\n        this.formatter.transaction = utils_1.parseTransaction;\n    }\n    async getMessageProof(blockNumber, sender, messageHash, logIndex) {\n        return await this.send(\"zks_getL2ToL1MsgProof\", [\n            ethers_1.BigNumber.from(blockNumber).toNumber(),\n            sender,\n            ethers_1.ethers.utils.hexlify(messageHash),\n            logIndex\n        ]);\n    }\n    async getLogProof(txHash, index) {\n        return await this.send(\"zks_getL2ToL1LogProof\", [\n            ethers_1.ethers.utils.hexlify(txHash),\n            index\n        ]);\n    }\n    async getL1BatchBlockRange(l1BatchNumber) {\n        const range = await this.send(\"zks_getL1BatchBlockRange\", [\n            l1BatchNumber\n        ]);\n        if (range == null) {\n            return null;\n        }\n        return [\n            parseInt(range[0], 16),\n            parseInt(range[1], 16)\n        ];\n    }\n    async getMainContractAddress() {\n        if (!this.contractAddresses.mainContract) {\n            this.contractAddresses.mainContract = await this.send(\"zks_getMainContract\", []);\n        }\n        return this.contractAddresses.mainContract;\n    }\n    async getTestnetPaymasterAddress() {\n        // Unlike contract's addresses, the testnet paymaster is not cached, since it can be trivially changed\n        // on the fly by the server and should not be relied on to be constant\n        return await this.send(\"zks_getTestnetPaymaster\", []);\n    }\n    async getDefaultBridgeAddresses() {\n        if (!this.contractAddresses.erc20BridgeL1) {\n            let addresses = await this.send(\"zks_getBridgeContracts\", []);\n            this.contractAddresses.erc20BridgeL1 = addresses.l1Erc20DefaultBridge;\n            this.contractAddresses.erc20BridgeL2 = addresses.l2Erc20DefaultBridge;\n            this.contractAddresses.wethBridgeL1 = addresses.l1WethBridge;\n            this.contractAddresses.wethBridgeL2 = addresses.l2WethBridge;\n        }\n        return {\n            erc20L1: this.contractAddresses.erc20BridgeL1,\n            erc20L2: this.contractAddresses.erc20BridgeL2,\n            wethL1: this.contractAddresses.wethBridgeL1,\n            wethL2: this.contractAddresses.wethBridgeL2\n        };\n    }\n    async getTokenPrice(token) {\n        return await this.send(\"zks_getTokenPrice\", [\n            token\n        ]);\n    }\n    async getAllAccountBalances(address) {\n        let balances = await this.send(\"zks_getAllAccountBalances\", [\n            address\n        ]);\n        for(let token in balances){\n            balances[token] = ethers_1.BigNumber.from(balances[token]);\n        }\n        return balances;\n    }\n    async l1ChainId() {\n        const res = await this.send(\"zks_L1ChainId\", []);\n        return ethers_1.BigNumber.from(res).toNumber();\n    }\n    async getL1BatchNumber() {\n        const number = await this.send(\"zks_L1BatchNumber\", []);\n        return ethers_1.BigNumber.from(number).toNumber();\n    }\n    async getL1BatchDetails(number) {\n        return await this.send(\"zks_getL1BatchDetails\", [\n            number\n        ]);\n    }\n    async getBlockDetails(number) {\n        return await this.send(\"zks_getBlockDetails\", [\n            number\n        ]);\n    }\n    async getTransactionDetails(txHash) {\n        return await this.send(\"zks_getTransactionDetails\", [\n            txHash\n        ]);\n    }\n    async getBytecodeByHash(bytecodeHash) {\n        return await this.send(\"zks_getBytecodeByHash\", [\n            bytecodeHash\n        ]);\n    }\n    async getRawBlockTransactions(number) {\n        return await this.send(\"zks_getRawBlockTransactions\", [\n            number\n        ]);\n    }\n    async getWithdrawTx(transaction) {\n        var _a, _b, _c;\n        var _d;\n        const { ...tx } = transaction;\n        if (tx.to == null && tx.from == null) {\n            throw new Error(\"withdrawal target address is undefined\");\n        }\n        (_a = tx.to) !== null && _a !== void 0 ? _a : tx.to = tx.from;\n        (_b = tx.overrides) !== null && _b !== void 0 ? _b : tx.overrides = {};\n        (_c = (_d = tx.overrides).from) !== null && _c !== void 0 ? _c : _d.from = tx.from;\n        if ((0, utils_1.isETH)(tx.token)) {\n            if (!tx.overrides.value) {\n                tx.overrides.value = tx.amount;\n            }\n            const passedValue = ethers_1.BigNumber.from(tx.overrides.value);\n            if (!passedValue.eq(tx.amount)) {\n                // To avoid users shooting themselves into the foot, we will always use the amount to withdraw\n                // as the value\n                throw new Error(\"The tx.value is not equal to the value withdrawn\");\n            }\n            const ethL2Token = IEthTokenFactory_1.IEthTokenFactory.connect(utils_1.L2_ETH_TOKEN_ADDRESS, this);\n            return ethL2Token.populateTransaction.withdraw(tx.to, tx.overrides);\n        }\n        if (tx.bridgeAddress == null) {\n            const bridgeAddresses = await this.getDefaultBridgeAddresses();\n            const l2WethBridge = Il2BridgeFactory_1.Il2BridgeFactory.connect(bridgeAddresses.wethL2, this);\n            let l1WethToken = ethers_1.ethers.constants.AddressZero;\n            try {\n                l1WethToken = await l2WethBridge.l1TokenAddress(tx.token);\n            } catch (e) {}\n            tx.bridgeAddress = l1WethToken != ethers_1.ethers.constants.AddressZero ? bridgeAddresses.wethL2 : bridgeAddresses.erc20L2;\n        }\n        const bridge = Il2BridgeFactory_1.Il2BridgeFactory.connect(tx.bridgeAddress, this);\n        return bridge.populateTransaction.withdraw(tx.to, tx.token, tx.amount, tx.overrides);\n    }\n    async estimateGasWithdraw(transaction) {\n        const withdrawTx = await this.getWithdrawTx(transaction);\n        return await this.estimateGas(withdrawTx);\n    }\n    async getTransferTx(transaction) {\n        var _a, _b;\n        var _c;\n        const { ...tx } = transaction;\n        (_a = tx.overrides) !== null && _a !== void 0 ? _a : tx.overrides = {};\n        (_b = (_c = tx.overrides).from) !== null && _b !== void 0 ? _b : _c.from = tx.from;\n        if (tx.token == null || tx.token == utils_1.ETH_ADDRESS) {\n            return {\n                ...await ethers_1.ethers.utils.resolveProperties(tx.overrides),\n                to: tx.to,\n                value: tx.amount\n            };\n        } else {\n            const token = Ierc20Factory_1.Ierc20Factory.connect(tx.token, this);\n            return await token.populateTransaction.transfer(tx.to, tx.amount, tx.overrides);\n        }\n    }\n    async estimateGasTransfer(transaction) {\n        const transferTx = await this.getTransferTx(transaction);\n        return await this.estimateGas(transferTx);\n    }\n    static getDefaultProvider(zksyncNetwork = types_1.Network.Localhost) {\n        if (process.env.ZKSYNC_WEB3_API_URL) {\n            return new Provider(process.env.ZKSYNC_WEB3_API_URL);\n        }\n        switch(zksyncNetwork){\n            case types_1.Network.Localhost:\n                return new Provider(\"http://localhost:3050\");\n            case types_1.Network.Goerli:\n                return new Provider(\"https://zksync2-testnet.zksync.dev\");\n            case types_1.Network.Sepolia:\n                return new Provider(\"https://sepolia.era.zksync.dev\");\n            case types_1.Network.Mainnet:\n                return new Provider(\"https://mainnet.era.zksync.io\");\n        }\n    }\n    async newFilter(filter) {\n        filter = await filter;\n        const id = await this.send(\"eth_newFilter\", [\n            this._prepareFilter(filter)\n        ]);\n        return ethers_1.BigNumber.from(id);\n    }\n    async newBlockFilter() {\n        const id = await this.send(\"eth_newBlockFilter\", []);\n        return ethers_1.BigNumber.from(id);\n    }\n    async newPendingTransactionsFilter() {\n        const id = await this.send(\"eth_newPendingTransactionFilter\", []);\n        return ethers_1.BigNumber.from(id);\n    }\n    async getFilterChanges(idx) {\n        const logs = await this.send(\"eth_getFilterChanges\", [\n            idx.toHexString()\n        ]);\n        return typeof logs[0] === \"string\" ? logs : this._parseLogs(logs);\n    }\n    async getLogs(filter = {}) {\n        filter = await filter;\n        const logs = await this.send(\"eth_getLogs\", [\n            this._prepareFilter(filter)\n        ]);\n        return this._parseLogs(logs);\n    }\n    _parseLogs(logs) {\n        return Formatter.arrayOf(this.formatter.filterLog.bind(this.formatter))(logs);\n    }\n    _prepareFilter(filter) {\n        return {\n            ...filter,\n            fromBlock: filter.fromBlock == null ? null : this.formatter.blockTag(filter.fromBlock),\n            toBlock: filter.fromBlock == null ? null : this.formatter.blockTag(filter.toBlock)\n        };\n    }\n    _wrapTransaction(tx, hash) {\n        const response = super._wrapTransaction(tx, hash);\n        response.waitFinalize = async ()=>{\n            const receipt = await response.wait();\n            while(true){\n                const block = await this.getBlock(\"finalized\");\n                if (receipt.blockNumber <= block.number) {\n                    return await this.getTransactionReceipt(receipt.transactionHash);\n                } else {\n                    await (0, utils_1.sleep)(this.pollingInterval);\n                }\n            }\n        };\n        return response;\n    }\n    // This is inefficient. Status should probably be indicated in the transaction receipt.\n    async getTransactionStatus(txHash) {\n        const tx = await this.getTransaction(txHash);\n        if (tx == null) {\n            return types_1.TransactionStatus.NotFound;\n        }\n        if (tx.blockNumber == null) {\n            return types_1.TransactionStatus.Processing;\n        }\n        const verifiedBlock = await this.getBlock(\"finalized\");\n        if (tx.blockNumber <= verifiedBlock.number) {\n            return types_1.TransactionStatus.Finalized;\n        }\n        return types_1.TransactionStatus.Committed;\n    }\n    async getTransaction(hash) {\n        hash = await hash;\n        const tx = await super.getTransaction(hash);\n        return tx ? this._wrapTransaction(tx, hash) : null;\n    }\n    async sendTransaction(transaction) {\n        return await super.sendTransaction(transaction);\n    }\n    async getL2TransactionFromPriorityOp(l1TxResponse) {\n        const receipt = await l1TxResponse.wait();\n        const l2Hash = (0, utils_1.getL2HashFromPriorityOp)(receipt, await this.getMainContractAddress());\n        let status = null;\n        do {\n            status = await this.getTransactionStatus(l2Hash);\n            await (0, utils_1.sleep)(this.pollingInterval);\n        }while (status == types_1.TransactionStatus.NotFound);\n        return await this.getTransaction(l2Hash);\n    }\n    async getPriorityOpResponse(l1TxResponse) {\n        const l2Response = {\n            ...l1TxResponse\n        };\n        l2Response.waitL1Commit = l2Response.wait;\n        l2Response.wait = async ()=>{\n            const l2Tx = await this.getL2TransactionFromPriorityOp(l1TxResponse);\n            return await l2Tx.wait();\n        };\n        l2Response.waitFinalize = async ()=>{\n            const l2Tx = await this.getL2TransactionFromPriorityOp(l1TxResponse);\n            return await l2Tx.waitFinalize();\n        };\n        return l2Response;\n    }\n    async getContractAccountInfo(address) {\n        const deployerContract = new ethers_1.Contract(utils_1.CONTRACT_DEPLOYER_ADDRESS, utils_1.CONTRACT_DEPLOYER, this);\n        const data = await deployerContract.getAccountInfo(address);\n        return {\n            supportedAAVersion: data.supportedAAVersion,\n            nonceOrdering: data.nonceOrdering\n        };\n    }\n    // TODO (EVM-3): support refundRecipient for fee estimation\n    async estimateL1ToL2Execute(transaction) {\n        var _a, _b;\n        (_a = transaction.gasPerPubdataByte) !== null && _a !== void 0 ? _a : transaction.gasPerPubdataByte = utils_1.REQUIRED_L1_TO_L2_GAS_PER_PUBDATA_LIMIT;\n        // If the `from` address is not provided, we use a random address, because\n        // due to storage slot aggregation, the gas estimation will depend on the address\n        // and so estimation for the zero address may be smaller than for the sender.\n        (_b = transaction.caller) !== null && _b !== void 0 ? _b : transaction.caller = ethers_1.ethers.Wallet.createRandom().address;\n        const customData = {\n            gasPerPubdataByte: transaction.gasPerPubdataByte\n        };\n        if (transaction.factoryDeps) {\n            Object.assign(customData, {\n                factoryDeps: transaction.factoryDeps\n            });\n        }\n        return await this.estimateGasL1({\n            from: transaction.caller,\n            data: transaction.calldata,\n            to: transaction.contractAddress,\n            value: transaction.l2Value,\n            customData\n        });\n    }\n}\nexports.Provider = Provider;\nProvider._nextPollId = 1;\n/* c8 ignore start */ class Web3Provider extends Provider {\n    constructor(provider, network){\n        if (provider == null) {\n            throw new Error(\"missing provider\");\n        }\n        if (!provider.request) {\n            throw new Error(\"provider must implement eip-1193\");\n        }\n        let path = provider.host || provider.path || (provider.isMetaMask ? \"metamask\" : \"eip-1193:\");\n        super(path, network);\n        this.provider = provider;\n    }\n    async send(method, params) {\n        params !== null && params !== void 0 ? params : params = [];\n        // Metamask complains about eth_sign (and on some versions hangs)\n        if (method == \"eth_sign\" && (this.provider.isMetaMask || this.provider.isStatus)) {\n            // https://github.com/ethereum/go-ethereum/wiki/Management-APIs#personal_sign\n            method = \"personal_sign\";\n            params = [\n                params[1],\n                params[0]\n            ];\n        }\n        return await this.provider.request({\n            method,\n            params\n        });\n    }\n    getSigner(addressOrIndex) {\n        return signer_1.Signer.from(super.getSigner(addressOrIndex));\n    }\n    async estimateGas(transaction) {\n        const gas = await super.estimateGas(transaction);\n        const metamaskMinimum = ethers_1.BigNumber.from(21000);\n        const isEIP712 = transaction.customData != null || transaction.type == utils_1.EIP712_TX_TYPE;\n        return gas.gt(metamaskMinimum) || isEIP712 ? gas : metamaskMinimum;\n    }\n}\nexports.Web3Provider = Web3Provider; /* c8 ignore stop */ \n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/zksync-ethers/build/src/provider.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/zksync-ethers/build/src/signer.js":
/*!********************************************************!*\
  !*** ./node_modules/zksync-ethers/build/src/signer.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.L1Signer = exports.Signer = exports.EIP712Signer = exports.EIP712_TYPES = void 0;\nconst ethers_1 = __webpack_require__(/*! ethers */ \"(ssr)/./node_modules/ethers/lib.esm/index.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/zksync-ethers/build/src/utils.js\");\nconst hash_1 = __webpack_require__(/*! @ethersproject/hash */ \"(ssr)/./node_modules/@ethersproject/hash/lib.esm/index.js\");\nconst adapters_1 = __webpack_require__(/*! ./adapters */ \"(ssr)/./node_modules/zksync-ethers/build/src/adapters.js\");\nexports.EIP712_TYPES = {\n    Transaction: [\n        { name: \"txType\", type: \"uint256\" },\n        { name: \"from\", type: \"uint256\" },\n        { name: \"to\", type: \"uint256\" },\n        { name: \"gasLimit\", type: \"uint256\" },\n        { name: \"gasPerPubdataByteLimit\", type: \"uint256\" },\n        { name: \"maxFeePerGas\", type: \"uint256\" },\n        { name: \"maxPriorityFeePerGas\", type: \"uint256\" },\n        { name: \"paymaster\", type: \"uint256\" },\n        { name: \"nonce\", type: \"uint256\" },\n        { name: \"value\", type: \"uint256\" },\n        { name: \"data\", type: \"bytes\" },\n        { name: \"factoryDeps\", type: \"bytes32[]\" },\n        { name: \"paymasterInput\", type: \"bytes\" },\n    ],\n};\nclass EIP712Signer {\n    constructor(ethSigner, chainId) {\n        this.ethSigner = ethSigner;\n        this.eip712Domain = Promise.resolve(chainId).then((chainId) => ({\n            name: \"zkSync\",\n            version: \"2\",\n            chainId,\n        }));\n    }\n    static getSignInput(transaction) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;\n        const maxFeePerGas = (_b = (_a = transaction.maxFeePerGas) !== null && _a !== void 0 ? _a : transaction.gasPrice) !== null && _b !== void 0 ? _b : 0;\n        const maxPriorityFeePerGas = transaction.maxPriorityFeePerGas || maxFeePerGas;\n        const gasPerPubdataByteLimit = (_d = (_c = transaction.customData) === null || _c === void 0 ? void 0 : _c.gasPerPubdata) !== null && _d !== void 0 ? _d : utils_1.DEFAULT_GAS_PER_PUBDATA_LIMIT;\n        return {\n            txType: transaction.type,\n            from: transaction.from,\n            to: transaction.to,\n            gasLimit: transaction.gasLimit || 0,\n            gasPerPubdataByteLimit: gasPerPubdataByteLimit,\n            maxFeePerGas,\n            maxPriorityFeePerGas,\n            paymaster: ((_f = (_e = transaction.customData) === null || _e === void 0 ? void 0 : _e.paymasterParams) === null || _f === void 0 ? void 0 : _f.paymaster) || ethers_1.ethers.constants.AddressZero,\n            nonce: transaction.nonce || 0,\n            value: transaction.value || 0,\n            data: transaction.data || \"0x\",\n            factoryDeps: ((_h = (_g = transaction.customData) === null || _g === void 0 ? void 0 : _g.factoryDeps) === null || _h === void 0 ? void 0 : _h.map((dep) => (0, utils_1.hashBytecode)(dep))) || [],\n            paymasterInput: ((_k = (_j = transaction.customData) === null || _j === void 0 ? void 0 : _j.paymasterParams) === null || _k === void 0 ? void 0 : _k.paymasterInput) || \"0x\",\n        };\n    }\n    async sign(transaction) {\n        return await this.ethSigner._signTypedData(await this.eip712Domain, exports.EIP712_TYPES, EIP712Signer.getSignInput(transaction));\n    }\n    static getSignedDigest(transaction) {\n        if (!transaction.chainId) {\n            throw Error(\"Transaction chainId isn't set\");\n        }\n        const domain = {\n            name: \"zkSync\",\n            version: \"2\",\n            chainId: transaction.chainId,\n        };\n        return hash_1._TypedDataEncoder.hash(domain, exports.EIP712_TYPES, EIP712Signer.getSignInput(transaction));\n    }\n    async getDomain() {\n        return await this.eip712Domain;\n    }\n}\nexports.EIP712Signer = EIP712Signer;\n// This class is to be used on the frontend, with metamask injection.\n// It only contains L2 operations. For L1 operations, see L1Signer.\n// Sample usage:\n// const provider = new zkweb3.Web3Provider(window.ethereum);\n// const signer = provider.getSigner();\n// const tx = await signer.sendTransaction({ ... });\n/* c8 ignore start */\nclass Signer extends (0, adapters_1.AdapterL2)(ethers_1.ethers.providers.JsonRpcSigner) {\n    _signerL2() {\n        return this;\n    }\n    _providerL2() {\n        return this.provider;\n    }\n    static from(signer) {\n        const newSigner = Object.setPrototypeOf(signer, Signer.prototype);\n        // @ts-ignore\n        newSigner.eip712 = new EIP712Signer(newSigner, newSigner.getChainId());\n        return newSigner;\n    }\n    // an alias with a better name\n    async getNonce(blockTag) {\n        return await this.getTransactionCount(blockTag);\n    }\n    async sendTransaction(transaction) {\n        var _a, _b, _c, _d, _e, _f, _g;\n        if (transaction.customData == null && transaction.type == null) {\n            // use legacy txs by default\n            transaction.type = 0;\n        }\n        if (transaction.customData == null && transaction.type != utils_1.EIP712_TX_TYPE) {\n            return (await super.sendTransaction(transaction));\n        }\n        else {\n            const address = await this.getAddress();\n            (_a = transaction.from) !== null && _a !== void 0 ? _a : (transaction.from = address);\n            if (transaction.from.toLowerCase() != address.toLowerCase()) {\n                throw new Error(\"Transaction `from` address mismatch\");\n            }\n            transaction.type = utils_1.EIP712_TX_TYPE;\n            (_b = transaction.value) !== null && _b !== void 0 ? _b : (transaction.value = 0);\n            (_c = transaction.data) !== null && _c !== void 0 ? _c : (transaction.data = \"0x\");\n            (_d = transaction.nonce) !== null && _d !== void 0 ? _d : (transaction.nonce = await this.getNonce());\n            transaction.customData = this._fillCustomData(transaction.customData);\n            (_e = transaction.gasPrice) !== null && _e !== void 0 ? _e : (transaction.gasPrice = await this.provider.getGasPrice());\n            (_f = transaction.gasLimit) !== null && _f !== void 0 ? _f : (transaction.gasLimit = await this.provider.estimateGas(transaction));\n            (_g = transaction.chainId) !== null && _g !== void 0 ? _g : (transaction.chainId = (await this.provider.getNetwork()).chainId);\n            transaction.customData.customSignature = await this.eip712.sign(transaction);\n            const txBytes = (0, utils_1.serialize)(transaction);\n            return await this.provider.sendTransaction(txBytes);\n        }\n    }\n}\nexports.Signer = Signer;\n// This class is to be used on the frontend with metamask injection.\n// It only contains L1 operations. For L2 operations, see Signer.\n// Sample usage:\n// const provider = new ethers.Web3Provider(window.ethereum);\n// const zksyncProvider = new zkweb3.Provider('<rpc_url>');\n// const signer = zkweb3.L1Signer.from(provider.getSigner(), zksyncProvider);\n// const tx = await signer.deposit({ ... });\nclass L1Signer extends (0, adapters_1.AdapterL1)(ethers_1.ethers.providers.JsonRpcSigner) {\n    _providerL2() {\n        return this.providerL2;\n    }\n    _providerL1() {\n        return this.provider;\n    }\n    _signerL1() {\n        return this;\n    }\n    static from(signer, zksyncProvider) {\n        const newSigner = Object.setPrototypeOf(signer, L1Signer.prototype);\n        newSigner.providerL2 = zksyncProvider;\n        return newSigner;\n    }\n    connectToL2(provider) {\n        this.providerL2 = provider;\n        return this;\n    }\n}\nexports.L1Signer = L1Signer;\n/* c8 ignore stop */\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/zksync-ethers/build/src/signer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/zksync-ethers/build/src/types.js":
/*!*******************************************************!*\
  !*** ./node_modules/zksync-ethers/build/src/types.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AccountNonceOrdering = exports.AccountAbstractionVersion = exports.TransactionStatus = exports.PriorityOpTree = exports.PriorityQueueType = exports.Network = void 0;\n// Ethereum network\nvar Network;\n(function (Network) {\n    Network[Network[\"Mainnet\"] = 1] = \"Mainnet\";\n    Network[Network[\"Ropsten\"] = 3] = \"Ropsten\";\n    Network[Network[\"Rinkeby\"] = 4] = \"Rinkeby\";\n    Network[Network[\"Goerli\"] = 5] = \"Goerli\";\n    Network[Network[\"Sepolia\"] = 6] = \"Sepolia\";\n    Network[Network[\"Localhost\"] = 9] = \"Localhost\";\n})(Network = exports.Network || (exports.Network = {}));\nvar PriorityQueueType;\n(function (PriorityQueueType) {\n    PriorityQueueType[PriorityQueueType[\"Deque\"] = 0] = \"Deque\";\n    PriorityQueueType[PriorityQueueType[\"HeapBuffer\"] = 1] = \"HeapBuffer\";\n    PriorityQueueType[PriorityQueueType[\"Heap\"] = 2] = \"Heap\";\n})(PriorityQueueType = exports.PriorityQueueType || (exports.PriorityQueueType = {}));\nvar PriorityOpTree;\n(function (PriorityOpTree) {\n    PriorityOpTree[PriorityOpTree[\"Full\"] = 0] = \"Full\";\n    PriorityOpTree[PriorityOpTree[\"Rollup\"] = 1] = \"Rollup\";\n})(PriorityOpTree = exports.PriorityOpTree || (exports.PriorityOpTree = {}));\nvar TransactionStatus;\n(function (TransactionStatus) {\n    TransactionStatus[\"NotFound\"] = \"not-found\";\n    TransactionStatus[\"Processing\"] = \"processing\";\n    TransactionStatus[\"Committed\"] = \"committed\";\n    TransactionStatus[\"Finalized\"] = \"finalized\";\n})(TransactionStatus = exports.TransactionStatus || (exports.TransactionStatus = {}));\nvar AccountAbstractionVersion;\n(function (AccountAbstractionVersion) {\n    AccountAbstractionVersion[AccountAbstractionVersion[\"None\"] = 0] = \"None\";\n    AccountAbstractionVersion[AccountAbstractionVersion[\"Version1\"] = 1] = \"Version1\";\n})(AccountAbstractionVersion = exports.AccountAbstractionVersion || (exports.AccountAbstractionVersion = {}));\nvar AccountNonceOrdering;\n(function (AccountNonceOrdering) {\n    AccountNonceOrdering[AccountNonceOrdering[\"Sequential\"] = 0] = \"Sequential\";\n    AccountNonceOrdering[AccountNonceOrdering[\"Arbitrary\"] = 1] = \"Arbitrary\";\n})(AccountNonceOrdering = exports.AccountNonceOrdering || (exports.AccountNonceOrdering = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvemtzeW5jLWV0aGVycy9idWlsZC9zcmMvdHlwZXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsNEJBQTRCLEdBQUcsaUNBQWlDLEdBQUcseUJBQXlCLEdBQUcsc0JBQXNCLEdBQUcseUJBQXlCLEdBQUcsZUFBZTtBQUNuSztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLGdDQUFnQyxlQUFlLEtBQUs7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsb0RBQW9ELHlCQUF5QixLQUFLO0FBQ25GO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyw4Q0FBOEMsc0JBQXNCLEtBQUs7QUFDMUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxvREFBb0QseUJBQXlCLEtBQUs7QUFDbkY7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLG9FQUFvRSxpQ0FBaUMsS0FBSztBQUMzRztBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsMERBQTBELDRCQUE0QixLQUFLIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc21hcnQtd2FsbGV0LWNsaWVudC8uL25vZGVfbW9kdWxlcy96a3N5bmMtZXRoZXJzL2J1aWxkL3NyYy90eXBlcy5qcz84MGQ1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5BY2NvdW50Tm9uY2VPcmRlcmluZyA9IGV4cG9ydHMuQWNjb3VudEFic3RyYWN0aW9uVmVyc2lvbiA9IGV4cG9ydHMuVHJhbnNhY3Rpb25TdGF0dXMgPSBleHBvcnRzLlByaW9yaXR5T3BUcmVlID0gZXhwb3J0cy5Qcmlvcml0eVF1ZXVlVHlwZSA9IGV4cG9ydHMuTmV0d29yayA9IHZvaWQgMDtcbi8vIEV0aGVyZXVtIG5ldHdvcmtcbnZhciBOZXR3b3JrO1xuKGZ1bmN0aW9uIChOZXR3b3JrKSB7XG4gICAgTmV0d29ya1tOZXR3b3JrW1wiTWFpbm5ldFwiXSA9IDFdID0gXCJNYWlubmV0XCI7XG4gICAgTmV0d29ya1tOZXR3b3JrW1wiUm9wc3RlblwiXSA9IDNdID0gXCJSb3BzdGVuXCI7XG4gICAgTmV0d29ya1tOZXR3b3JrW1wiUmlua2VieVwiXSA9IDRdID0gXCJSaW5rZWJ5XCI7XG4gICAgTmV0d29ya1tOZXR3b3JrW1wiR29lcmxpXCJdID0gNV0gPSBcIkdvZXJsaVwiO1xuICAgIE5ldHdvcmtbTmV0d29ya1tcIlNlcG9saWFcIl0gPSA2XSA9IFwiU2Vwb2xpYVwiO1xuICAgIE5ldHdvcmtbTmV0d29ya1tcIkxvY2FsaG9zdFwiXSA9IDldID0gXCJMb2NhbGhvc3RcIjtcbn0pKE5ldHdvcmsgPSBleHBvcnRzLk5ldHdvcmsgfHwgKGV4cG9ydHMuTmV0d29yayA9IHt9KSk7XG52YXIgUHJpb3JpdHlRdWV1ZVR5cGU7XG4oZnVuY3Rpb24gKFByaW9yaXR5UXVldWVUeXBlKSB7XG4gICAgUHJpb3JpdHlRdWV1ZVR5cGVbUHJpb3JpdHlRdWV1ZVR5cGVbXCJEZXF1ZVwiXSA9IDBdID0gXCJEZXF1ZVwiO1xuICAgIFByaW9yaXR5UXVldWVUeXBlW1ByaW9yaXR5UXVldWVUeXBlW1wiSGVhcEJ1ZmZlclwiXSA9IDFdID0gXCJIZWFwQnVmZmVyXCI7XG4gICAgUHJpb3JpdHlRdWV1ZVR5cGVbUHJpb3JpdHlRdWV1ZVR5cGVbXCJIZWFwXCJdID0gMl0gPSBcIkhlYXBcIjtcbn0pKFByaW9yaXR5UXVldWVUeXBlID0gZXhwb3J0cy5Qcmlvcml0eVF1ZXVlVHlwZSB8fCAoZXhwb3J0cy5Qcmlvcml0eVF1ZXVlVHlwZSA9IHt9KSk7XG52YXIgUHJpb3JpdHlPcFRyZWU7XG4oZnVuY3Rpb24gKFByaW9yaXR5T3BUcmVlKSB7XG4gICAgUHJpb3JpdHlPcFRyZWVbUHJpb3JpdHlPcFRyZWVbXCJGdWxsXCJdID0gMF0gPSBcIkZ1bGxcIjtcbiAgICBQcmlvcml0eU9wVHJlZVtQcmlvcml0eU9wVHJlZVtcIlJvbGx1cFwiXSA9IDFdID0gXCJSb2xsdXBcIjtcbn0pKFByaW9yaXR5T3BUcmVlID0gZXhwb3J0cy5Qcmlvcml0eU9wVHJlZSB8fCAoZXhwb3J0cy5Qcmlvcml0eU9wVHJlZSA9IHt9KSk7XG52YXIgVHJhbnNhY3Rpb25TdGF0dXM7XG4oZnVuY3Rpb24gKFRyYW5zYWN0aW9uU3RhdHVzKSB7XG4gICAgVHJhbnNhY3Rpb25TdGF0dXNbXCJOb3RGb3VuZFwiXSA9IFwibm90LWZvdW5kXCI7XG4gICAgVHJhbnNhY3Rpb25TdGF0dXNbXCJQcm9jZXNzaW5nXCJdID0gXCJwcm9jZXNzaW5nXCI7XG4gICAgVHJhbnNhY3Rpb25TdGF0dXNbXCJDb21taXR0ZWRcIl0gPSBcImNvbW1pdHRlZFwiO1xuICAgIFRyYW5zYWN0aW9uU3RhdHVzW1wiRmluYWxpemVkXCJdID0gXCJmaW5hbGl6ZWRcIjtcbn0pKFRyYW5zYWN0aW9uU3RhdHVzID0gZXhwb3J0cy5UcmFuc2FjdGlvblN0YXR1cyB8fCAoZXhwb3J0cy5UcmFuc2FjdGlvblN0YXR1cyA9IHt9KSk7XG52YXIgQWNjb3VudEFic3RyYWN0aW9uVmVyc2lvbjtcbihmdW5jdGlvbiAoQWNjb3VudEFic3RyYWN0aW9uVmVyc2lvbikge1xuICAgIEFjY291bnRBYnN0cmFjdGlvblZlcnNpb25bQWNjb3VudEFic3RyYWN0aW9uVmVyc2lvbltcIk5vbmVcIl0gPSAwXSA9IFwiTm9uZVwiO1xuICAgIEFjY291bnRBYnN0cmFjdGlvblZlcnNpb25bQWNjb3VudEFic3RyYWN0aW9uVmVyc2lvbltcIlZlcnNpb24xXCJdID0gMV0gPSBcIlZlcnNpb24xXCI7XG59KShBY2NvdW50QWJzdHJhY3Rpb25WZXJzaW9uID0gZXhwb3J0cy5BY2NvdW50QWJzdHJhY3Rpb25WZXJzaW9uIHx8IChleHBvcnRzLkFjY291bnRBYnN0cmFjdGlvblZlcnNpb24gPSB7fSkpO1xudmFyIEFjY291bnROb25jZU9yZGVyaW5nO1xuKGZ1bmN0aW9uIChBY2NvdW50Tm9uY2VPcmRlcmluZykge1xuICAgIEFjY291bnROb25jZU9yZGVyaW5nW0FjY291bnROb25jZU9yZGVyaW5nW1wiU2VxdWVudGlhbFwiXSA9IDBdID0gXCJTZXF1ZW50aWFsXCI7XG4gICAgQWNjb3VudE5vbmNlT3JkZXJpbmdbQWNjb3VudE5vbmNlT3JkZXJpbmdbXCJBcmJpdHJhcnlcIl0gPSAxXSA9IFwiQXJiaXRyYXJ5XCI7XG59KShBY2NvdW50Tm9uY2VPcmRlcmluZyA9IGV4cG9ydHMuQWNjb3VudE5vbmNlT3JkZXJpbmcgfHwgKGV4cG9ydHMuQWNjb3VudE5vbmNlT3JkZXJpbmcgPSB7fSkpO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/zksync-ethers/build/src/types.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/zksync-ethers/build/src/utils.js":
/*!*******************************************************!*\
  !*** ./node_modules/zksync-ethers/build/src/utils.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.estimateCustomBridgeDepositL2Gas = exports.scaleGasLimit = exports.estimateDefaultBridgeDepositL2Gas = exports.isTypedDataSignatureCorrect = exports.isMessageSignatureCorrect = exports.getERC20BridgeCalldata = exports.getERC20DefaultBridgeData = exports.undoL1ToL2Alias = exports.applyL1ToL2Alias = exports.getL2HashFromPriorityOp = exports.parseTransaction = exports.hashBytecode = exports.serialize = exports.checkBaseCost = exports.createAddress = exports.create2Address = exports.getDeployedContracts = exports.getHashedL2ToL1Msg = exports.layer1TxDefaults = exports.sleep = exports.isETH = exports.REQUIRED_L1_TO_L2_GAS_PER_PUBDATA_LIMIT = exports.DEFAULT_GAS_PER_PUBDATA_LIMIT = exports.L1_RECOMMENDED_MIN_ETH_DEPOSIT_GAS_LIMIT = exports.L1_RECOMMENDED_MIN_ERC20_DEPOSIT_GAS_LIMIT = exports.L1_FEE_ESTIMATION_COEF_DENOMINATOR = exports.L1_FEE_ESTIMATION_COEF_NUMERATOR = exports.MAX_BYTECODE_LEN_BYTES = exports.PRIORITY_OPERATION_L2_TX_TYPE = exports.EIP712_TX_TYPE = exports.EIP1271_MAGIC_VALUE = exports.L1_TO_L2_ALIAS_OFFSET = exports.ZERO_HASH = exports.NONCE_HOLDER_ADDRESS = exports.L2_ETH_TOKEN_ADDRESS = exports.L1_MESSENGER_ADDRESS = exports.CONTRACT_DEPLOYER_ADDRESS = exports.BOOTLOADER_FORMAL_ADDRESS = exports.ETH_ADDRESS = exports.NONCE_HOLDER_ABI = exports.L2_BRIDGE_ABI = exports.L1_BRIDGE_ABI = exports.IERC1271 = exports.IERC20 = exports.L1_MESSENGER = exports.CONTRACT_DEPLOYER = exports.ZKSYNC_MAIN_ABI = exports.EIP712_TYPES = void 0;\nconst ethers_1 = __webpack_require__(/*! ethers */ \"(ssr)/./node_modules/ethers/lib.esm/index.js\");\nconst types_1 = __webpack_require__(/*! ./types */ \"(ssr)/./node_modules/zksync-ethers/build/src/types.js\");\nconst signer_1 = __webpack_require__(/*! ./signer */ \"(ssr)/./node_modules/zksync-ethers/build/src/signer.js\");\nconst Ierc20Factory_1 = __webpack_require__(/*! ../typechain/Ierc20Factory */ \"(ssr)/./node_modules/zksync-ethers/build/typechain/Ierc20Factory.js\");\nconst Il1BridgeFactory_1 = __webpack_require__(/*! ../typechain/Il1BridgeFactory */ \"(ssr)/./node_modules/zksync-ethers/build/typechain/Il1BridgeFactory.js\");\nconst utils_1 = __webpack_require__(/*! ethers/lib/utils */ \"(ssr)/./node_modules/ethers/lib/utils.js\");\n__exportStar(__webpack_require__(/*! ./paymaster-utils */ \"(ssr)/./node_modules/zksync-ethers/build/src/paymaster-utils.js\"), exports);\nvar signer_2 = __webpack_require__(/*! ./signer */ \"(ssr)/./node_modules/zksync-ethers/build/src/signer.js\");\nObject.defineProperty(exports, \"EIP712_TYPES\", ({ enumerable: true, get: function () { return signer_2.EIP712_TYPES; } }));\nexports.ZKSYNC_MAIN_ABI = new ethers_1.utils.Interface(__webpack_require__(/*! ../abi/IZkSync.json */ \"(ssr)/./node_modules/zksync-ethers/build/abi/IZkSync.json\"));\nexports.CONTRACT_DEPLOYER = new ethers_1.utils.Interface(__webpack_require__(/*! ../abi/IContractDeployer.json */ \"(ssr)/./node_modules/zksync-ethers/build/abi/IContractDeployer.json\"));\nexports.L1_MESSENGER = new ethers_1.utils.Interface(__webpack_require__(/*! ../abi/IL1Messenger.json */ \"(ssr)/./node_modules/zksync-ethers/build/abi/IL1Messenger.json\"));\nexports.IERC20 = new ethers_1.utils.Interface(__webpack_require__(/*! ../abi/IERC20.json */ \"(ssr)/./node_modules/zksync-ethers/build/abi/IERC20.json\"));\nexports.IERC1271 = new ethers_1.utils.Interface(__webpack_require__(/*! ../abi/IERC1271.json */ \"(ssr)/./node_modules/zksync-ethers/build/abi/IERC1271.json\"));\nexports.L1_BRIDGE_ABI = new ethers_1.utils.Interface(__webpack_require__(/*! ../abi/IL1Bridge.json */ \"(ssr)/./node_modules/zksync-ethers/build/abi/IL1Bridge.json\"));\nexports.L2_BRIDGE_ABI = new ethers_1.utils.Interface(__webpack_require__(/*! ../abi/IL2Bridge.json */ \"(ssr)/./node_modules/zksync-ethers/build/abi/IL2Bridge.json\"));\nexports.NONCE_HOLDER_ABI = new ethers_1.utils.Interface(__webpack_require__(/*! ../abi/INonceHolder.json */ \"(ssr)/./node_modules/zksync-ethers/build/abi/INonceHolder.json\"));\nexports.ETH_ADDRESS = \"0x0000000000000000000000000000000000000000\";\nexports.BOOTLOADER_FORMAL_ADDRESS = \"0x0000000000000000000000000000000000008001\";\nexports.CONTRACT_DEPLOYER_ADDRESS = \"0x0000000000000000000000000000000000008006\";\nexports.L1_MESSENGER_ADDRESS = \"0x0000000000000000000000000000000000008008\";\nexports.L2_ETH_TOKEN_ADDRESS = \"0x000000000000000000000000000000000000800a\";\nexports.NONCE_HOLDER_ADDRESS = \"0x0000000000000000000000000000000000008003\";\nexports.ZERO_HASH = \"0x0000000000000000000000000000000000000000000000000000000000000000\";\nexports.L1_TO_L2_ALIAS_OFFSET = \"0x1111000000000000000000000000000000001111\";\nexports.EIP1271_MAGIC_VALUE = \"0x1626ba7e\";\nexports.EIP712_TX_TYPE = 0x71;\nexports.PRIORITY_OPERATION_L2_TX_TYPE = 0xff;\nexports.MAX_BYTECODE_LEN_BYTES = ((1 << 16) - 1) * 32;\n// Currently, for some reason the SDK may return slightly smaller L1 gas limit than required for initiating L1->L2\n// transaction. We use a coefficient to ensure that the transaction will be accepted.\nexports.L1_FEE_ESTIMATION_COEF_NUMERATOR = ethers_1.BigNumber.from(12);\nexports.L1_FEE_ESTIMATION_COEF_DENOMINATOR = ethers_1.BigNumber.from(10);\n// This gas limit will be used for displaying the error messages when the users do not have enough fee.\nexports.L1_RECOMMENDED_MIN_ERC20_DEPOSIT_GAS_LIMIT = 400000;\nexports.L1_RECOMMENDED_MIN_ETH_DEPOSIT_GAS_LIMIT = 200000;\n// The large L2 gas per pubdata to sign. This gas is enough to ensure that\n// any reasonable limit will be accepted. Note, that the operator is NOT required to\n// use the honest value of gas per pubdata, and it can use any value up to the one signed by the user.\n// In the future releases, we will provide a way to estimate the current gasPerPubdata.\nexports.DEFAULT_GAS_PER_PUBDATA_LIMIT = 50000;\n// It is possible to provide practically any gasPerPubdataByte for L1->L2 transactions, since\n// the cost per gas will be adjusted respectively. We will use 800 as a relatively optimal value for now.\nexports.REQUIRED_L1_TO_L2_GAS_PER_PUBDATA_LIMIT = 800;\nfunction isETH(token) {\n    return token.toLowerCase() == exports.ETH_ADDRESS || token.toLowerCase() == exports.L2_ETH_TOKEN_ADDRESS;\n}\nexports.isETH = isETH;\nfunction sleep(millis) {\n    return new Promise((resolve) => setTimeout(resolve, millis));\n}\nexports.sleep = sleep;\nfunction layer1TxDefaults() {\n    return {\n        queueType: types_1.PriorityQueueType.Deque,\n        opTree: types_1.PriorityOpTree.Full,\n    };\n}\nexports.layer1TxDefaults = layer1TxDefaults;\nfunction getHashedL2ToL1Msg(sender, msg, txNumberInBlock) {\n    const encodedMsg = new Uint8Array([\n        0,\n        1,\n        ...ethers_1.ethers.utils.zeroPad(ethers_1.ethers.utils.hexlify(txNumberInBlock), 2),\n        ...ethers_1.ethers.utils.arrayify(exports.L1_MESSENGER_ADDRESS),\n        ...ethers_1.ethers.utils.zeroPad(sender, 32),\n        ...ethers_1.ethers.utils.arrayify(ethers_1.ethers.utils.keccak256(msg)),\n    ]);\n    return ethers_1.ethers.utils.keccak256(encodedMsg);\n}\nexports.getHashedL2ToL1Msg = getHashedL2ToL1Msg;\nfunction getDeployedContracts(receipt) {\n    const addressBytesLen = 40;\n    return (receipt.logs\n        .filter((log) => log.topics[0] == ethers_1.utils.id(\"ContractDeployed(address,bytes32,address)\") &&\n        log.address == exports.CONTRACT_DEPLOYER_ADDRESS)\n        // Take the last topic (deployed contract address as U256) and extract address from it (U160).\n        .map((log) => {\n        const sender = `0x${log.topics[1].slice(log.topics[1].length - addressBytesLen)}`;\n        const bytecodeHash = log.topics[2];\n        const address = `0x${log.topics[3].slice(log.topics[3].length - addressBytesLen)}`;\n        return {\n            sender: ethers_1.utils.getAddress(sender),\n            bytecodeHash: bytecodeHash,\n            deployedAddress: ethers_1.utils.getAddress(address),\n        };\n    }));\n}\nexports.getDeployedContracts = getDeployedContracts;\nfunction create2Address(sender, bytecodeHash, salt, input = \"\") {\n    const prefix = ethers_1.ethers.utils.keccak256(ethers_1.ethers.utils.toUtf8Bytes(\"zksyncCreate2\"));\n    const inputHash = ethers_1.ethers.utils.keccak256(input);\n    const addressBytes = ethers_1.ethers.utils\n        .keccak256(ethers_1.ethers.utils.concat([\n        prefix,\n        ethers_1.ethers.utils.zeroPad(sender, 32),\n        salt,\n        bytecodeHash,\n        inputHash,\n    ]))\n        .slice(26);\n    return ethers_1.ethers.utils.getAddress(addressBytes);\n}\nexports.create2Address = create2Address;\nfunction createAddress(sender, senderNonce) {\n    const prefix = ethers_1.ethers.utils.keccak256(ethers_1.ethers.utils.toUtf8Bytes(\"zksyncCreate\"));\n    const addressBytes = ethers_1.ethers.utils\n        .keccak256(ethers_1.ethers.utils.concat([\n        prefix,\n        ethers_1.ethers.utils.zeroPad(sender, 32),\n        ethers_1.ethers.utils.zeroPad(ethers_1.ethers.utils.hexlify(senderNonce), 32),\n    ]))\n        .slice(26);\n    return ethers_1.ethers.utils.getAddress(addressBytes);\n}\nexports.createAddress = createAddress;\nasync function checkBaseCost(baseCost, value) {\n    if (baseCost.gt(await value)) {\n        throw new Error(`The base cost of performing the priority operation is higher than the provided value parameter ` +\n            `for the transaction: baseCost: ${baseCost}, provided value: ${value}`);\n    }\n}\nexports.checkBaseCost = checkBaseCost;\nfunction serialize(transaction, signature) {\n    var _a, _b;\n    if (transaction.customData == null && transaction.type != exports.EIP712_TX_TYPE) {\n        return ethers_1.utils.serializeTransaction(transaction, signature);\n    }\n    if (!transaction.chainId) {\n        throw Error(\"Transaction chainId isn't set\");\n    }\n    function formatNumber(value, name) {\n        const result = ethers_1.utils.stripZeros(ethers_1.BigNumber.from(value).toHexString());\n        if (result.length > 32) {\n            throw new Error(\"invalid length for \" + name);\n        }\n        return result;\n    }\n    if (!transaction.from) {\n        throw new Error(\"Explicitly providing `from` field is required for EIP712 transactions\");\n    }\n    const from = transaction.from;\n    const meta = (_a = transaction.customData) !== null && _a !== void 0 ? _a : {};\n    let maxFeePerGas = transaction.maxFeePerGas || transaction.gasPrice || 0;\n    let maxPriorityFeePerGas = transaction.maxPriorityFeePerGas || maxFeePerGas;\n    const fields = [\n        formatNumber(transaction.nonce || 0, \"nonce\"),\n        formatNumber(maxPriorityFeePerGas, \"maxPriorityFeePerGas\"),\n        formatNumber(maxFeePerGas, \"maxFeePerGas\"),\n        formatNumber(transaction.gasLimit || 0, \"gasLimit\"),\n        transaction.to != null ? ethers_1.utils.getAddress(transaction.to) : \"0x\",\n        formatNumber(transaction.value || 0, \"value\"),\n        transaction.data || \"0x\",\n    ];\n    if (signature) {\n        const sig = ethers_1.utils.splitSignature(signature);\n        fields.push(formatNumber(sig.recoveryParam, \"recoveryParam\"));\n        fields.push(ethers_1.utils.stripZeros(sig.r));\n        fields.push(ethers_1.utils.stripZeros(sig.s));\n    }\n    else {\n        fields.push(formatNumber(transaction.chainId, \"chainId\"));\n        fields.push(\"0x\");\n        fields.push(\"0x\");\n    }\n    fields.push(formatNumber(transaction.chainId, \"chainId\"));\n    fields.push(ethers_1.utils.getAddress(from));\n    // Add meta\n    fields.push(formatNumber(meta.gasPerPubdata || exports.DEFAULT_GAS_PER_PUBDATA_LIMIT, \"gasPerPubdata\"));\n    fields.push(((_b = meta.factoryDeps) !== null && _b !== void 0 ? _b : []).map((dep) => ethers_1.utils.hexlify(dep)));\n    if (meta.customSignature && ethers_1.ethers.utils.arrayify(meta.customSignature).length == 0) {\n        throw new Error(\"Empty signatures are not supported\");\n    }\n    fields.push(meta.customSignature || \"0x\");\n    if (meta.paymasterParams) {\n        fields.push([\n            meta.paymasterParams.paymaster,\n            ethers_1.ethers.utils.hexlify(meta.paymasterParams.paymasterInput),\n        ]);\n    }\n    else {\n        fields.push([]);\n    }\n    return ethers_1.utils.hexConcat([[exports.EIP712_TX_TYPE], ethers_1.utils.RLP.encode(fields)]);\n}\nexports.serialize = serialize;\nfunction hashBytecode(bytecode) {\n    // For getting the consistent length we first convert the bytecode to UInt8Array\n    const bytecodeAsArray = ethers_1.ethers.utils.arrayify(bytecode);\n    if (bytecodeAsArray.length % 32 != 0) {\n        throw new Error(\"The bytecode length in bytes must be divisible by 32\");\n    }\n    if (bytecodeAsArray.length > exports.MAX_BYTECODE_LEN_BYTES) {\n        throw new Error(`Bytecode can not be longer than ${exports.MAX_BYTECODE_LEN_BYTES} bytes`);\n    }\n    const hashStr = ethers_1.ethers.utils.sha256(bytecodeAsArray);\n    const hash = ethers_1.ethers.utils.arrayify(hashStr);\n    // Note that the length of the bytecode\n    // should be provided in 32-byte words.\n    const bytecodeLengthInWords = bytecodeAsArray.length / 32;\n    if (bytecodeLengthInWords % 2 == 0) {\n        throw new Error(\"Bytecode length in 32-byte words must be odd\");\n    }\n    const bytecodeLength = ethers_1.ethers.utils.arrayify(bytecodeLengthInWords);\n    // The bytecode should always take the first 2 bytes of the bytecode hash,\n    // so we pad it from the left in case the length is smaller than 2 bytes.\n    const bytecodeLengthPadded = ethers_1.ethers.utils.zeroPad(bytecodeLength, 2);\n    const codeHashVersion = new Uint8Array([1, 0]);\n    hash.set(codeHashVersion, 0);\n    hash.set(bytecodeLengthPadded, 2);\n    return hash;\n}\nexports.hashBytecode = hashBytecode;\nfunction parseTransaction(payload) {\n    function handleAddress(value) {\n        if (value === \"0x\") {\n            return null;\n        }\n        return ethers_1.utils.getAddress(value);\n    }\n    function handleNumber(value) {\n        if (value === \"0x\") {\n            return ethers_1.BigNumber.from(0);\n        }\n        return ethers_1.BigNumber.from(value);\n    }\n    function arrayToPaymasterParams(arr) {\n        if (arr.length == 0) {\n            return null;\n        }\n        if (arr.length != 2) {\n            throw new Error(`Invalid paymaster parameters, expected to have length of 2, found ${arr.length}`);\n        }\n        return {\n            paymaster: ethers_1.utils.getAddress(arr[0]),\n            paymasterInput: ethers_1.utils.arrayify(arr[1]),\n        };\n    }\n    const bytes = ethers_1.utils.arrayify(payload);\n    if (bytes[0] != exports.EIP712_TX_TYPE) {\n        return ethers_1.utils.parseTransaction(bytes);\n    }\n    const raw = ethers_1.utils.RLP.decode(bytes.slice(1));\n    const transaction = {\n        type: exports.EIP712_TX_TYPE,\n        nonce: handleNumber(raw[0]).toNumber(),\n        maxPriorityFeePerGas: handleNumber(raw[1]),\n        maxFeePerGas: handleNumber(raw[2]),\n        gasLimit: handleNumber(raw[3]),\n        to: handleAddress(raw[4]),\n        value: handleNumber(raw[5]),\n        data: raw[6],\n        chainId: handleNumber(raw[10]),\n        from: handleAddress(raw[11]),\n        customData: {\n            gasPerPubdata: handleNumber(raw[12]),\n            factoryDeps: raw[13],\n            customSignature: raw[14],\n            paymasterParams: arrayToPaymasterParams(raw[15]),\n        },\n    };\n    const ethSignature = {\n        v: handleNumber(raw[7]).toNumber(),\n        r: raw[8],\n        s: raw[9],\n    };\n    if ((ethers_1.utils.hexlify(ethSignature.r) == \"0x\" || ethers_1.utils.hexlify(ethSignature.s) == \"0x\") &&\n        !transaction.customData.customSignature) {\n        return transaction;\n    }\n    if (ethSignature.v !== 0 && ethSignature.v !== 1 && !transaction.customData.customSignature) {\n        throw new Error(\"Failed to parse signature\");\n    }\n    if (!transaction.customData.customSignature) {\n        transaction.v = ethSignature.v;\n        transaction.s = ethSignature.s;\n        transaction.r = ethSignature.r;\n    }\n    transaction.hash = eip712TxHash(transaction, ethSignature);\n    return transaction;\n}\nexports.parseTransaction = parseTransaction;\nfunction getSignature(transaction, ethSignature) {\n    var _a;\n    if (((_a = transaction === null || transaction === void 0 ? void 0 : transaction.customData) === null || _a === void 0 ? void 0 : _a.customSignature) && transaction.customData.customSignature.length) {\n        return ethers_1.ethers.utils.arrayify(transaction.customData.customSignature);\n    }\n    if (!ethSignature) {\n        throw new Error(\"No signature provided\");\n    }\n    const r = ethers_1.ethers.utils.zeroPad(ethers_1.ethers.utils.arrayify(ethSignature.r), 32);\n    const s = ethers_1.ethers.utils.zeroPad(ethers_1.ethers.utils.arrayify(ethSignature.s), 32);\n    const v = ethSignature.v;\n    return new Uint8Array([...r, ...s, v]);\n}\nfunction eip712TxHash(transaction, ethSignature) {\n    const signedDigest = signer_1.EIP712Signer.getSignedDigest(transaction);\n    const hashedSignature = ethers_1.ethers.utils.keccak256(getSignature(transaction, ethSignature));\n    return ethers_1.ethers.utils.keccak256(ethers_1.ethers.utils.hexConcat([signedDigest, hashedSignature]));\n}\nfunction getL2HashFromPriorityOp(txReceipt, zkSyncAddress) {\n    let txHash = null;\n    for (const log of txReceipt.logs) {\n        if (log.address.toLowerCase() != zkSyncAddress.toLowerCase()) {\n            continue;\n        }\n        try {\n            const priorityQueueLog = exports.ZKSYNC_MAIN_ABI.parseLog(log);\n            if (priorityQueueLog && priorityQueueLog.args.txHash != null) {\n                txHash = priorityQueueLog.args.txHash;\n            }\n        }\n        catch { }\n    }\n    if (!txHash) {\n        throw new Error(\"Failed to parse tx logs\");\n    }\n    return txHash;\n}\nexports.getL2HashFromPriorityOp = getL2HashFromPriorityOp;\nconst ADDRESS_MODULO = ethers_1.BigNumber.from(2).pow(160);\nfunction applyL1ToL2Alias(address) {\n    return ethers_1.ethers.utils.hexlify(ethers_1.ethers.BigNumber.from(address).add(exports.L1_TO_L2_ALIAS_OFFSET).mod(ADDRESS_MODULO));\n}\nexports.applyL1ToL2Alias = applyL1ToL2Alias;\nfunction undoL1ToL2Alias(address) {\n    let result = ethers_1.ethers.BigNumber.from(address).sub(exports.L1_TO_L2_ALIAS_OFFSET);\n    if (result.lt(ethers_1.BigNumber.from(0))) {\n        result = result.add(ADDRESS_MODULO);\n    }\n    return ethers_1.ethers.utils.hexlify(result);\n}\nexports.undoL1ToL2Alias = undoL1ToL2Alias;\n/// Getters data used to correctly initialize the L1 token counterpart on L2\nasync function getERC20DefaultBridgeData(l1TokenAddress, provider) {\n    const token = Ierc20Factory_1.Ierc20Factory.connect(l1TokenAddress, provider);\n    const name = await token.name();\n    const symbol = await token.symbol();\n    const decimals = await token.decimals();\n    const coder = new utils_1.AbiCoder();\n    const nameBytes = coder.encode([\"string\"], [name]);\n    const symbolBytes = coder.encode([\"string\"], [symbol]);\n    const decimalsBytes = coder.encode([\"uint256\"], [decimals]);\n    return coder.encode([\"bytes\", \"bytes\", \"bytes\"], [nameBytes, symbolBytes, decimalsBytes]);\n}\nexports.getERC20DefaultBridgeData = getERC20DefaultBridgeData;\n/// The method that returns the calldata that will be sent by an L1 ERC20 bridge to its L2 counterpart\n/// during bridging of a token.\nasync function getERC20BridgeCalldata(l1TokenAddress, l1Sender, l2Receiver, amount, bridgeData) {\n    return exports.L2_BRIDGE_ABI.encodeFunctionData(\"finalizeDeposit\", [\n        l1Sender,\n        l2Receiver,\n        l1TokenAddress,\n        amount,\n        bridgeData,\n    ]);\n}\nexports.getERC20BridgeCalldata = getERC20BridgeCalldata;\n// The method with similar functionality is already available in ethers.js,\n// the only difference is that we provide additional `try { } catch { }`\n// for error-resilience.\n//\n// It will also pave the road for allowing future EIP-1271 signature verification, by\n// letting our SDK have functionality to verify signatures.\nfunction isECDSASignatureCorrect(address, msgHash, signature) {\n    try {\n        return address == ethers_1.ethers.utils.recoverAddress(msgHash, signature);\n    }\n    catch {\n        // In case ECDSA signature verification has thrown an error,\n        // we simply consider the signature as incorrect.\n        return false;\n    }\n}\nasync function isEIP1271SignatureCorrect(provider, address, msgHash, signature) {\n    const accountContract = new ethers_1.ethers.Contract(address, exports.IERC1271, provider);\n    // This line may throw an exception if the contract does not implement the EIP1271 correctly.\n    // But it may also throw an exception in case the internet connection is lost.\n    // It is the caller's responsibility to handle the exception.\n    const result = await accountContract.isValidSignature(msgHash, signature);\n    return result == exports.EIP1271_MAGIC_VALUE;\n}\nasync function isSignatureCorrect(provider, address, msgHash, signature) {\n    let isContractAccount = false;\n    const code = await provider.getCode(address);\n    isContractAccount = ethers_1.ethers.utils.arrayify(code).length != 0;\n    if (!isContractAccount) {\n        return isECDSASignatureCorrect(address, msgHash, signature);\n    }\n    else {\n        return await isEIP1271SignatureCorrect(provider, address, msgHash, signature);\n    }\n}\n// Returns `true` or `false` depending on whether the account abstraction's\n// signature is correct. Note, that while currently it does not do any `async` actions.\n// in the future it will. That's why the `Promise<boolean>` is returned.\nasync function isMessageSignatureCorrect(provider, address, message, signature) {\n    const msgHash = ethers_1.ethers.utils.hashMessage(message);\n    return await isSignatureCorrect(provider, address, msgHash, signature);\n}\nexports.isMessageSignatureCorrect = isMessageSignatureCorrect;\n// Returns `true` or `false` depending on whether the account abstraction's\n// EIP712 signature is correct. Note, that while currently it does not do any `async` actions.\n// in the future it will. That's why the `Promise<boolean>` is returned.\nasync function isTypedDataSignatureCorrect(provider, address, domain, types, value, signature) {\n    const msgHash = ethers_1.ethers.utils._TypedDataEncoder.hash(domain, types, value);\n    return await isSignatureCorrect(provider, address, msgHash, signature);\n}\nexports.isTypedDataSignatureCorrect = isTypedDataSignatureCorrect;\nasync function estimateDefaultBridgeDepositL2Gas(providerL1, providerL2, token, amount, to, from, gasPerPubdataByte) {\n    // If the `from` address is not provided, we use a random address, because\n    // due to storage slot aggregation, the gas estimation will depend on the address\n    // and so estimation for the zero address may be smaller than for the sender.\n    from !== null && from !== void 0 ? from : (from = ethers_1.ethers.Wallet.createRandom().address);\n    if (token == exports.ETH_ADDRESS) {\n        return await providerL2.estimateL1ToL2Execute({\n            contractAddress: to,\n            gasPerPubdataByte: gasPerPubdataByte,\n            caller: from,\n            calldata: \"0x\",\n            l2Value: amount,\n        });\n    }\n    else {\n        let value, l1BridgeAddress, l2BridgeAddress, bridgeData;\n        const bridgeAddresses = await providerL2.getDefaultBridgeAddresses();\n        const l1WethBridge = Il1BridgeFactory_1.Il1BridgeFactory.connect(bridgeAddresses.wethL1, providerL1);\n        let l2WethToken = ethers_1.ethers.constants.AddressZero;\n        try {\n            l2WethToken = await l1WethBridge.l2TokenAddress(token);\n        }\n        catch (e) { }\n        if (l2WethToken != ethers_1.ethers.constants.AddressZero) {\n            value = amount;\n            l1BridgeAddress = bridgeAddresses.wethL1;\n            l2BridgeAddress = bridgeAddresses.wethL2;\n            bridgeData = \"0x\";\n        }\n        else {\n            value = 0;\n            l1BridgeAddress = bridgeAddresses.erc20L1;\n            l2BridgeAddress = bridgeAddresses.erc20L2;\n            bridgeData = await getERC20DefaultBridgeData(token, providerL1);\n        }\n        return await estimateCustomBridgeDepositL2Gas(providerL2, l1BridgeAddress, l2BridgeAddress, token, amount, to, bridgeData, from, gasPerPubdataByte, value);\n    }\n}\nexports.estimateDefaultBridgeDepositL2Gas = estimateDefaultBridgeDepositL2Gas;\nfunction scaleGasLimit(gasLimit) {\n    return gasLimit.mul(exports.L1_FEE_ESTIMATION_COEF_NUMERATOR).div(exports.L1_FEE_ESTIMATION_COEF_DENOMINATOR);\n}\nexports.scaleGasLimit = scaleGasLimit;\nasync function estimateCustomBridgeDepositL2Gas(providerL2, l1BridgeAddress, l2BridgeAddress, token, amount, to, bridgeData, from, gasPerPubdataByte, l2Value) {\n    const calldata = await getERC20BridgeCalldata(token, from, to, amount, bridgeData);\n    return await providerL2.estimateL1ToL2Execute({\n        caller: applyL1ToL2Alias(l1BridgeAddress),\n        contractAddress: l2BridgeAddress,\n        gasPerPubdataByte,\n        calldata,\n        l2Value,\n    });\n}\nexports.estimateCustomBridgeDepositL2Gas = estimateCustomBridgeDepositL2Gas;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/zksync-ethers/build/src/utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/zksync-ethers/build/src/wallet.js":
/*!********************************************************!*\
  !*** ./node_modules/zksync-ethers/build/src/wallet.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Wallet = void 0;\nconst signer_1 = __webpack_require__(/*! ./signer */ \"(ssr)/./node_modules/zksync-ethers/build/src/signer.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/zksync-ethers/build/src/utils.js\");\nconst ethers_1 = __webpack_require__(/*! ethers */ \"(ssr)/./node_modules/ethers/lib.esm/index.js\");\nconst adapters_1 = __webpack_require__(/*! ./adapters */ \"(ssr)/./node_modules/zksync-ethers/build/src/adapters.js\");\nclass Wallet extends (0, adapters_1.AdapterL2)((0, adapters_1.AdapterL1)(ethers_1.ethers.Wallet)) {\n    _providerL1() {\n        if (this.providerL1 == null) {\n            throw new Error(\"L1 provider missing: use `connectToL1` to specify\");\n        }\n        return this.providerL1;\n    }\n    _providerL2() {\n        return this.provider;\n    }\n    _signerL1() {\n        return this.ethWallet();\n    }\n    _signerL2() {\n        return this;\n    }\n    ethWallet() {\n        return new ethers_1.ethers.Wallet(this._signingKey(), this._providerL1());\n    }\n    // an alias with a better name\n    async getNonce(blockTag) {\n        return await this.getTransactionCount(blockTag);\n    }\n    connect(provider) {\n        return new Wallet(this._signingKey(), provider, this.providerL1);\n    }\n    connectToL1(provider) {\n        return new Wallet(this._signingKey(), this.provider, provider);\n    }\n    static fromMnemonic(mnemonic, path, wordlist) {\n        const wallet = super.fromMnemonic(mnemonic, path, wordlist);\n        return new Wallet(wallet._signingKey());\n    }\n    static async fromEncryptedJson(json, password, callback) {\n        const wallet = await super.fromEncryptedJson(json, password, callback);\n        return new Wallet(wallet._signingKey());\n    }\n    static fromEncryptedJsonSync(json, password) {\n        const wallet = super.fromEncryptedJsonSync(json, password);\n        return new Wallet(wallet._signingKey());\n    }\n    static createRandom(options) {\n        const wallet = super.createRandom(options);\n        return new Wallet(wallet._signingKey());\n    }\n    constructor(privateKey, providerL2, providerL1) {\n        super(privateKey, providerL2);\n        if (this.provider != null) {\n            const chainId = this.getChainId();\n            // @ts-ignore\n            this.eip712 = new signer_1.EIP712Signer(this, chainId);\n        }\n        this.providerL1 = providerL1;\n    }\n    async populateTransaction(transaction) {\n        var _a, _b;\n        if (transaction.type == null && transaction.customData == null) {\n            // use legacy txs by default\n            transaction.type = 0;\n        }\n        if (transaction.customData == null && transaction.type != utils_1.EIP712_TX_TYPE) {\n            return await super.populateTransaction(transaction);\n        }\n        transaction.type = utils_1.EIP712_TX_TYPE;\n        const populated = await super.populateTransaction(transaction);\n        populated.type = utils_1.EIP712_TX_TYPE;\n        (_a = populated.value) !== null && _a !== void 0 ? _a : (populated.value = 0);\n        (_b = populated.data) !== null && _b !== void 0 ? _b : (populated.data = \"0x\");\n        populated.customData = this._fillCustomData(transaction.customData);\n        populated.gasPrice = await this.provider.getGasPrice();\n        return populated;\n    }\n    async signTransaction(transaction) {\n        var _a;\n        if (transaction.customData == null && transaction.type != utils_1.EIP712_TX_TYPE) {\n            if (transaction.type == 2 && transaction.maxFeePerGas == null) {\n                transaction.maxFeePerGas = await this.provider.getGasPrice();\n            }\n            return await super.signTransaction(transaction);\n        }\n        else {\n            (_a = transaction.from) !== null && _a !== void 0 ? _a : (transaction.from = this.address);\n            if (transaction.from.toLowerCase() != this.address.toLowerCase()) {\n                throw new Error(\"Transaction `from` address mismatch\");\n            }\n            const populated = await this.populateTransaction(transaction);\n            populated.customData.customSignature = await this.eip712.sign(transaction);\n            return (0, utils_1.serialize)(populated);\n        }\n    }\n    async sendTransaction(transaction) {\n        // Typescript isn't smart enough to recognise that wallet.sendTransaction\n        // calls provider.sendTransaction which returns our extended type and not ethers' one.\n        return (await super.sendTransaction(transaction));\n    }\n}\nexports.Wallet = Wallet;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvemtzeW5jLWV0aGVycy9idWlsZC9zcmMvd2FsbGV0LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGNBQWM7QUFDZCxpQkFBaUIsbUJBQU8sQ0FBQyx3RUFBVTtBQUNuQyxnQkFBZ0IsbUJBQU8sQ0FBQyxzRUFBUztBQUNqQyxpQkFBaUIsbUJBQU8sQ0FBQyw0REFBUTtBQUNqQyxtQkFBbUIsbUJBQU8sQ0FBQyw0RUFBWTtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc21hcnQtd2FsbGV0LWNsaWVudC8uL25vZGVfbW9kdWxlcy96a3N5bmMtZXRoZXJzL2J1aWxkL3NyYy93YWxsZXQuanM/NDNlNiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuV2FsbGV0ID0gdm9pZCAwO1xuY29uc3Qgc2lnbmVyXzEgPSByZXF1aXJlKFwiLi9zaWduZXJcIik7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIi4vdXRpbHNcIik7XG5jb25zdCBldGhlcnNfMSA9IHJlcXVpcmUoXCJldGhlcnNcIik7XG5jb25zdCBhZGFwdGVyc18xID0gcmVxdWlyZShcIi4vYWRhcHRlcnNcIik7XG5jbGFzcyBXYWxsZXQgZXh0ZW5kcyAoMCwgYWRhcHRlcnNfMS5BZGFwdGVyTDIpKCgwLCBhZGFwdGVyc18xLkFkYXB0ZXJMMSkoZXRoZXJzXzEuZXRoZXJzLldhbGxldCkpIHtcbiAgICBfcHJvdmlkZXJMMSgpIHtcbiAgICAgICAgaWYgKHRoaXMucHJvdmlkZXJMMSA9PSBudWxsKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJMMSBwcm92aWRlciBtaXNzaW5nOiB1c2UgYGNvbm5lY3RUb0wxYCB0byBzcGVjaWZ5XCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLnByb3ZpZGVyTDE7XG4gICAgfVxuICAgIF9wcm92aWRlckwyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm92aWRlcjtcbiAgICB9XG4gICAgX3NpZ25lckwxKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5ldGhXYWxsZXQoKTtcbiAgICB9XG4gICAgX3NpZ25lckwyKCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgZXRoV2FsbGV0KCkge1xuICAgICAgICByZXR1cm4gbmV3IGV0aGVyc18xLmV0aGVycy5XYWxsZXQodGhpcy5fc2lnbmluZ0tleSgpLCB0aGlzLl9wcm92aWRlckwxKCkpO1xuICAgIH1cbiAgICAvLyBhbiBhbGlhcyB3aXRoIGEgYmV0dGVyIG5hbWVcbiAgICBhc3luYyBnZXROb25jZShibG9ja1RhZykge1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5nZXRUcmFuc2FjdGlvbkNvdW50KGJsb2NrVGFnKTtcbiAgICB9XG4gICAgY29ubmVjdChwcm92aWRlcikge1xuICAgICAgICByZXR1cm4gbmV3IFdhbGxldCh0aGlzLl9zaWduaW5nS2V5KCksIHByb3ZpZGVyLCB0aGlzLnByb3ZpZGVyTDEpO1xuICAgIH1cbiAgICBjb25uZWN0VG9MMShwcm92aWRlcikge1xuICAgICAgICByZXR1cm4gbmV3IFdhbGxldCh0aGlzLl9zaWduaW5nS2V5KCksIHRoaXMucHJvdmlkZXIsIHByb3ZpZGVyKTtcbiAgICB9XG4gICAgc3RhdGljIGZyb21NbmVtb25pYyhtbmVtb25pYywgcGF0aCwgd29yZGxpc3QpIHtcbiAgICAgICAgY29uc3Qgd2FsbGV0ID0gc3VwZXIuZnJvbU1uZW1vbmljKG1uZW1vbmljLCBwYXRoLCB3b3JkbGlzdCk7XG4gICAgICAgIHJldHVybiBuZXcgV2FsbGV0KHdhbGxldC5fc2lnbmluZ0tleSgpKTtcbiAgICB9XG4gICAgc3RhdGljIGFzeW5jIGZyb21FbmNyeXB0ZWRKc29uKGpzb24sIHBhc3N3b3JkLCBjYWxsYmFjaykge1xuICAgICAgICBjb25zdCB3YWxsZXQgPSBhd2FpdCBzdXBlci5mcm9tRW5jcnlwdGVkSnNvbihqc29uLCBwYXNzd29yZCwgY2FsbGJhY2spO1xuICAgICAgICByZXR1cm4gbmV3IFdhbGxldCh3YWxsZXQuX3NpZ25pbmdLZXkoKSk7XG4gICAgfVxuICAgIHN0YXRpYyBmcm9tRW5jcnlwdGVkSnNvblN5bmMoanNvbiwgcGFzc3dvcmQpIHtcbiAgICAgICAgY29uc3Qgd2FsbGV0ID0gc3VwZXIuZnJvbUVuY3J5cHRlZEpzb25TeW5jKGpzb24sIHBhc3N3b3JkKTtcbiAgICAgICAgcmV0dXJuIG5ldyBXYWxsZXQod2FsbGV0Ll9zaWduaW5nS2V5KCkpO1xuICAgIH1cbiAgICBzdGF0aWMgY3JlYXRlUmFuZG9tKG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3Qgd2FsbGV0ID0gc3VwZXIuY3JlYXRlUmFuZG9tKG9wdGlvbnMpO1xuICAgICAgICByZXR1cm4gbmV3IFdhbGxldCh3YWxsZXQuX3NpZ25pbmdLZXkoKSk7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGVLZXksIHByb3ZpZGVyTDIsIHByb3ZpZGVyTDEpIHtcbiAgICAgICAgc3VwZXIocHJpdmF0ZUtleSwgcHJvdmlkZXJMMik7XG4gICAgICAgIGlmICh0aGlzLnByb3ZpZGVyICE9IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnN0IGNoYWluSWQgPSB0aGlzLmdldENoYWluSWQoKTtcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgIHRoaXMuZWlwNzEyID0gbmV3IHNpZ25lcl8xLkVJUDcxMlNpZ25lcih0aGlzLCBjaGFpbklkKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnByb3ZpZGVyTDEgPSBwcm92aWRlckwxO1xuICAgIH1cbiAgICBhc3luYyBwb3B1bGF0ZVRyYW5zYWN0aW9uKHRyYW5zYWN0aW9uKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIGlmICh0cmFuc2FjdGlvbi50eXBlID09IG51bGwgJiYgdHJhbnNhY3Rpb24uY3VzdG9tRGF0YSA9PSBudWxsKSB7XG4gICAgICAgICAgICAvLyB1c2UgbGVnYWN5IHR4cyBieSBkZWZhdWx0XG4gICAgICAgICAgICB0cmFuc2FjdGlvbi50eXBlID0gMDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHJhbnNhY3Rpb24uY3VzdG9tRGF0YSA9PSBudWxsICYmIHRyYW5zYWN0aW9uLnR5cGUgIT0gdXRpbHNfMS5FSVA3MTJfVFhfVFlQRSkge1xuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHN1cGVyLnBvcHVsYXRlVHJhbnNhY3Rpb24odHJhbnNhY3Rpb24pO1xuICAgICAgICB9XG4gICAgICAgIHRyYW5zYWN0aW9uLnR5cGUgPSB1dGlsc18xLkVJUDcxMl9UWF9UWVBFO1xuICAgICAgICBjb25zdCBwb3B1bGF0ZWQgPSBhd2FpdCBzdXBlci5wb3B1bGF0ZVRyYW5zYWN0aW9uKHRyYW5zYWN0aW9uKTtcbiAgICAgICAgcG9wdWxhdGVkLnR5cGUgPSB1dGlsc18xLkVJUDcxMl9UWF9UWVBFO1xuICAgICAgICAoX2EgPSBwb3B1bGF0ZWQudmFsdWUpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IChwb3B1bGF0ZWQudmFsdWUgPSAwKTtcbiAgICAgICAgKF9iID0gcG9wdWxhdGVkLmRhdGEpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IChwb3B1bGF0ZWQuZGF0YSA9IFwiMHhcIik7XG4gICAgICAgIHBvcHVsYXRlZC5jdXN0b21EYXRhID0gdGhpcy5fZmlsbEN1c3RvbURhdGEodHJhbnNhY3Rpb24uY3VzdG9tRGF0YSk7XG4gICAgICAgIHBvcHVsYXRlZC5nYXNQcmljZSA9IGF3YWl0IHRoaXMucHJvdmlkZXIuZ2V0R2FzUHJpY2UoKTtcbiAgICAgICAgcmV0dXJuIHBvcHVsYXRlZDtcbiAgICB9XG4gICAgYXN5bmMgc2lnblRyYW5zYWN0aW9uKHRyYW5zYWN0aW9uKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgaWYgKHRyYW5zYWN0aW9uLmN1c3RvbURhdGEgPT0gbnVsbCAmJiB0cmFuc2FjdGlvbi50eXBlICE9IHV0aWxzXzEuRUlQNzEyX1RYX1RZUEUpIHtcbiAgICAgICAgICAgIGlmICh0cmFuc2FjdGlvbi50eXBlID09IDIgJiYgdHJhbnNhY3Rpb24ubWF4RmVlUGVyR2FzID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0cmFuc2FjdGlvbi5tYXhGZWVQZXJHYXMgPSBhd2FpdCB0aGlzLnByb3ZpZGVyLmdldEdhc1ByaWNlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgc3VwZXIuc2lnblRyYW5zYWN0aW9uKHRyYW5zYWN0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIChfYSA9IHRyYW5zYWN0aW9uLmZyb20pICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6ICh0cmFuc2FjdGlvbi5mcm9tID0gdGhpcy5hZGRyZXNzKTtcbiAgICAgICAgICAgIGlmICh0cmFuc2FjdGlvbi5mcm9tLnRvTG93ZXJDYXNlKCkgIT0gdGhpcy5hZGRyZXNzLnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUcmFuc2FjdGlvbiBgZnJvbWAgYWRkcmVzcyBtaXNtYXRjaFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHBvcHVsYXRlZCA9IGF3YWl0IHRoaXMucG9wdWxhdGVUcmFuc2FjdGlvbih0cmFuc2FjdGlvbik7XG4gICAgICAgICAgICBwb3B1bGF0ZWQuY3VzdG9tRGF0YS5jdXN0b21TaWduYXR1cmUgPSBhd2FpdCB0aGlzLmVpcDcxMi5zaWduKHRyYW5zYWN0aW9uKTtcbiAgICAgICAgICAgIHJldHVybiAoMCwgdXRpbHNfMS5zZXJpYWxpemUpKHBvcHVsYXRlZCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYXN5bmMgc2VuZFRyYW5zYWN0aW9uKHRyYW5zYWN0aW9uKSB7XG4gICAgICAgIC8vIFR5cGVzY3JpcHQgaXNuJ3Qgc21hcnQgZW5vdWdoIHRvIHJlY29nbmlzZSB0aGF0IHdhbGxldC5zZW5kVHJhbnNhY3Rpb25cbiAgICAgICAgLy8gY2FsbHMgcHJvdmlkZXIuc2VuZFRyYW5zYWN0aW9uIHdoaWNoIHJldHVybnMgb3VyIGV4dGVuZGVkIHR5cGUgYW5kIG5vdCBldGhlcnMnIG9uZS5cbiAgICAgICAgcmV0dXJuIChhd2FpdCBzdXBlci5zZW5kVHJhbnNhY3Rpb24odHJhbnNhY3Rpb24pKTtcbiAgICB9XG59XG5leHBvcnRzLldhbGxldCA9IFdhbGxldDtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/zksync-ethers/build/src/wallet.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/zksync-ethers/build/typechain/IEthTokenFactory.js":
/*!************************************************************************!*\
  !*** ./node_modules/zksync-ethers/build/typechain/IEthTokenFactory.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.IEthTokenFactory = void 0;\nconst ethers_1 = __webpack_require__(/*! ethers */ \"(ssr)/./node_modules/ethers/lib.esm/index.js\");\nclass IEthTokenFactory {\n    static connect(address, signerOrProvider) {\n        return new ethers_1.Contract(address, _abi, signerOrProvider);\n    }\n}\nexports.IEthTokenFactory = IEthTokenFactory;\nconst _abi = [\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"account\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"Mint\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"from\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"to\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"value\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"Transfer\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"_l2Sender\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"_l1Receiver\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"_amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"Withdrawal\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"_l2Sender\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"_l1Receiver\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"_amount\",\n                type: \"uint256\",\n            },\n            {\n                indexed: false,\n                internalType: \"bytes\",\n                name: \"_additionalData\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"WithdrawalWithMessage\",\n        type: \"event\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"balanceOf\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"decimals\",\n        outputs: [\n            {\n                internalType: \"uint8\",\n                name: \"\",\n                type: \"uint8\",\n            },\n        ],\n        stateMutability: \"pure\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_account\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"mint\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"name\",\n        outputs: [\n            {\n                internalType: \"string\",\n                name: \"\",\n                type: \"string\",\n            },\n        ],\n        stateMutability: \"pure\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"symbol\",\n        outputs: [\n            {\n                internalType: \"string\",\n                name: \"\",\n                type: \"string\",\n            },\n        ],\n        stateMutability: \"pure\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"totalSupply\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_from\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"_to\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"transferFromTo\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_l1Receiver\",\n                type: \"address\",\n            },\n        ],\n        name: \"withdraw\",\n        outputs: [],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_l1Receiver\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"_additionalData\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"withdrawWithMessage\",\n        outputs: [],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvemtzeW5jLWV0aGVycy9idWlsZC90eXBlY2hhaW4vSUV0aFRva2VuRmFjdG9yeS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx3QkFBd0I7QUFDeEIsaUJBQWlCLG1CQUFPLENBQUMsNERBQVE7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc21hcnQtd2FsbGV0LWNsaWVudC8uL25vZGVfbW9kdWxlcy96a3N5bmMtZXRoZXJzL2J1aWxkL3R5cGVjaGFpbi9JRXRoVG9rZW5GYWN0b3J5LmpzPzNlZDQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKiBBdXRvZ2VuZXJhdGVkIGZpbGUuIERvIG5vdCBlZGl0IG1hbnVhbGx5LiAqL1xuLyogdHNsaW50OmRpc2FibGUgKi9cbi8qIGVzbGludC1kaXNhYmxlICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLklFdGhUb2tlbkZhY3RvcnkgPSB2b2lkIDA7XG5jb25zdCBldGhlcnNfMSA9IHJlcXVpcmUoXCJldGhlcnNcIik7XG5jbGFzcyBJRXRoVG9rZW5GYWN0b3J5IHtcbiAgICBzdGF0aWMgY29ubmVjdChhZGRyZXNzLCBzaWduZXJPclByb3ZpZGVyKSB7XG4gICAgICAgIHJldHVybiBuZXcgZXRoZXJzXzEuQ29udHJhY3QoYWRkcmVzcywgX2FiaSwgc2lnbmVyT3JQcm92aWRlcik7XG4gICAgfVxufVxuZXhwb3J0cy5JRXRoVG9rZW5GYWN0b3J5ID0gSUV0aFRva2VuRmFjdG9yeTtcbmNvbnN0IF9hYmkgPSBbXG4gICAge1xuICAgICAgICBhbm9ueW1vdXM6IGZhbHNlLFxuICAgICAgICBpbnB1dHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbmRleGVkOiB0cnVlLFxuICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJhY2NvdW50XCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGluZGV4ZWQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJhbW91bnRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIG5hbWU6IFwiTWludFwiLFxuICAgICAgICB0eXBlOiBcImV2ZW50XCIsXG4gICAgfSxcbiAgICB7XG4gICAgICAgIGFub255bW91czogZmFsc2UsXG4gICAgICAgIGlucHV0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcImZyb21cIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW5kZXhlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwidG9cIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcInZhbHVlXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBuYW1lOiBcIlRyYW5zZmVyXCIsXG4gICAgICAgIHR5cGU6IFwiZXZlbnRcIixcbiAgICB9LFxuICAgIHtcbiAgICAgICAgYW5vbnltb3VzOiBmYWxzZSxcbiAgICAgICAgaW5wdXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW5kZXhlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwiX2wyU2VuZGVyXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcIl9sMVJlY2VpdmVyXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGluZGV4ZWQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJfYW1vdW50XCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBuYW1lOiBcIldpdGhkcmF3YWxcIixcbiAgICAgICAgdHlwZTogXCJldmVudFwiLFxuICAgIH0sXG4gICAge1xuICAgICAgICBhbm9ueW1vdXM6IGZhbHNlLFxuICAgICAgICBpbnB1dHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbmRleGVkOiB0cnVlLFxuICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJfbDJTZW5kZXJcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW5kZXhlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwiX2wxUmVjZWl2ZXJcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcIl9hbW91bnRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJ5dGVzXCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJfYWRkaXRpb25hbERhdGFcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcImJ5dGVzXCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBuYW1lOiBcIldpdGhkcmF3YWxXaXRoTWVzc2FnZVwiLFxuICAgICAgICB0eXBlOiBcImV2ZW50XCIsXG4gICAgfSxcbiAgICB7XG4gICAgICAgIGlucHV0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIG5hbWU6IFwiYmFsYW5jZU9mXCIsXG4gICAgICAgIG91dHB1dHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBzdGF0ZU11dGFiaWxpdHk6IFwidmlld1wiLFxuICAgICAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gICAgfSxcbiAgICB7XG4gICAgICAgIGlucHV0czogW10sXG4gICAgICAgIG5hbWU6IFwiZGVjaW1hbHNcIixcbiAgICAgICAgb3V0cHV0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50OFwiLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50OFwiLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgc3RhdGVNdXRhYmlsaXR5OiBcInB1cmVcIixcbiAgICAgICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICAgIH0sXG4gICAge1xuICAgICAgICBpbnB1dHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwiX2FjY291bnRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcIl9hbW91bnRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIG5hbWU6IFwibWludFwiLFxuICAgICAgICBvdXRwdXRzOiBbXSxcbiAgICAgICAgc3RhdGVNdXRhYmlsaXR5OiBcIm5vbnBheWFibGVcIixcbiAgICAgICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICAgIH0sXG4gICAge1xuICAgICAgICBpbnB1dHM6IFtdLFxuICAgICAgICBuYW1lOiBcIm5hbWVcIixcbiAgICAgICAgb3V0cHV0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJzdHJpbmdcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBzdGF0ZU11dGFiaWxpdHk6IFwicHVyZVwiLFxuICAgICAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gICAgfSxcbiAgICB7XG4gICAgICAgIGlucHV0czogW10sXG4gICAgICAgIG5hbWU6IFwic3ltYm9sXCIsXG4gICAgICAgIG91dHB1dHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgc3RhdGVNdXRhYmlsaXR5OiBcInB1cmVcIixcbiAgICAgICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICAgIH0sXG4gICAge1xuICAgICAgICBpbnB1dHM6IFtdLFxuICAgICAgICBuYW1lOiBcInRvdGFsU3VwcGx5XCIsXG4gICAgICAgIG91dHB1dHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBzdGF0ZU11dGFiaWxpdHk6IFwidmlld1wiLFxuICAgICAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gICAgfSxcbiAgICB7XG4gICAgICAgIGlucHV0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJfZnJvbVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwiX3RvXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJfYW1vdW50XCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBuYW1lOiBcInRyYW5zZmVyRnJvbVRvXCIsXG4gICAgICAgIG91dHB1dHM6IFtdLFxuICAgICAgICBzdGF0ZU11dGFiaWxpdHk6IFwibm9ucGF5YWJsZVwiLFxuICAgICAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gICAgfSxcbiAgICB7XG4gICAgICAgIGlucHV0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJfbDFSZWNlaXZlclwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgbmFtZTogXCJ3aXRoZHJhd1wiLFxuICAgICAgICBvdXRwdXRzOiBbXSxcbiAgICAgICAgc3RhdGVNdXRhYmlsaXR5OiBcInBheWFibGVcIixcbiAgICAgICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICAgIH0sXG4gICAge1xuICAgICAgICBpbnB1dHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwiX2wxUmVjZWl2ZXJcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJ5dGVzXCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJfYWRkaXRpb25hbERhdGFcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcImJ5dGVzXCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBuYW1lOiBcIndpdGhkcmF3V2l0aE1lc3NhZ2VcIixcbiAgICAgICAgb3V0cHV0czogW10sXG4gICAgICAgIHN0YXRlTXV0YWJpbGl0eTogXCJwYXlhYmxlXCIsXG4gICAgICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgICB9LFxuXTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/zksync-ethers/build/typechain/IEthTokenFactory.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/zksync-ethers/build/typechain/INonceHolderFactory.js":
/*!***************************************************************************!*\
  !*** ./node_modules/zksync-ethers/build/typechain/INonceHolderFactory.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.INonceHolderFactory = void 0;\nconst ethers_1 = __webpack_require__(/*! ethers */ \"(ssr)/./node_modules/ethers/lib.esm/index.js\");\nclass INonceHolderFactory {\n    static connect(address, signerOrProvider) {\n        return new ethers_1.Contract(address, _abi, signerOrProvider);\n    }\n}\nexports.INonceHolderFactory = INonceHolderFactory;\nconst _abi = [\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"accountAddress\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"uint256\",\n                name: \"key\",\n                type: \"uint256\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"value\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"ValueSetUnderNonce\",\n        type: \"event\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_address\",\n                type: \"address\",\n            },\n        ],\n        name: \"getDeploymentNonce\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_address\",\n                type: \"address\",\n            },\n        ],\n        name: \"getMinNonce\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_address\",\n                type: \"address\",\n            },\n        ],\n        name: \"getRawNonce\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_key\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"getValueUnderNonce\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_value\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"increaseMinNonce\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_address\",\n                type: \"address\",\n            },\n        ],\n        name: \"incrementDeploymentNonce\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_expectedNonce\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"incrementMinNonceIfEquals\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_address\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_nonce\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"isNonceUsed\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_key\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_value\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"setValueUnderNonce\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_address\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_key\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"bool\",\n                name: \"_shouldBeUsed\",\n                type: \"bool\",\n            },\n        ],\n        name: \"validateNonceUsage\",\n        outputs: [],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/zksync-ethers/build/typechain/INonceHolderFactory.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/zksync-ethers/build/typechain/IZkSyncFactory.js":
/*!**********************************************************************!*\
  !*** ./node_modules/zksync-ethers/build/typechain/IZkSyncFactory.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.IZkSyncFactory = void 0;\nconst ethers_1 = __webpack_require__(/*! ethers */ \"(ssr)/./node_modules/ethers/lib.esm/index.js\");\nclass IZkSyncFactory {\n    static connect(address, signerOrProvider) {\n        return new ethers_1.Contract(address, _abi, signerOrProvider);\n    }\n}\nexports.IZkSyncFactory = IZkSyncFactory;\nconst _abi = [\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"uint256\",\n                name: \"batchNumber\",\n                type: \"uint256\",\n            },\n            {\n                indexed: true,\n                internalType: \"bytes32\",\n                name: \"batchHash\",\n                type: \"bytes32\",\n            },\n            {\n                indexed: true,\n                internalType: \"bytes32\",\n                name: \"commitment\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"BlockCommit\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"uint256\",\n                name: \"batchNumber\",\n                type: \"uint256\",\n            },\n            {\n                indexed: true,\n                internalType: \"bytes32\",\n                name: \"batchHash\",\n                type: \"bytes32\",\n            },\n            {\n                indexed: true,\n                internalType: \"bytes32\",\n                name: \"commitment\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"BlockExecution\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"totalBatchesCommitted\",\n                type: \"uint256\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"totalBatchesVerified\",\n                type: \"uint256\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"totalBatchesExecuted\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"BlocksRevert\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"uint256\",\n                name: \"previousLastVerifiedBatch\",\n                type: \"uint256\",\n            },\n            {\n                indexed: true,\n                internalType: \"uint256\",\n                name: \"currentLastVerifiedBatch\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"BlocksVerification\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"to\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"EthWithdrawalFinalized\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                components: [\n                    {\n                        components: [\n                            {\n                                internalType: \"address\",\n                                name: \"facet\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"enum Diamond.Action\",\n                                name: \"action\",\n                                type: \"uint8\",\n                            },\n                            {\n                                internalType: \"bool\",\n                                name: \"isFreezable\",\n                                type: \"bool\",\n                            },\n                            {\n                                internalType: \"bytes4[]\",\n                                name: \"selectors\",\n                                type: \"bytes4[]\",\n                            },\n                        ],\n                        internalType: \"struct Diamond.FacetCut[]\",\n                        name: \"facetCuts\",\n                        type: \"tuple[]\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"initAddress\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"initCalldata\",\n                        type: \"bytes\",\n                    },\n                ],\n                indexed: false,\n                internalType: \"struct Diamond.DiamondCutData\",\n                name: \"diamondCut\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"ExecuteUpgrade\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [],\n        name: \"Freeze\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"bool\",\n                name: \"isPorterAvailable\",\n                type: \"bool\",\n            },\n        ],\n        name: \"IsPorterAvailableStatusUpdate\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"oldAdmin\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"newAdmin\",\n                type: \"address\",\n            },\n        ],\n        name: \"NewAdmin\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"oldGovernor\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"newGovernor\",\n                type: \"address\",\n            },\n        ],\n        name: \"NewGovernor\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"oldPendingAdmin\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"newPendingAdmin\",\n                type: \"address\",\n            },\n        ],\n        name: \"NewPendingAdmin\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"oldPendingGovernor\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"newPendingGovernor\",\n                type: \"address\",\n            },\n        ],\n        name: \"NewPendingGovernor\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"txId\",\n                type: \"uint256\",\n            },\n            {\n                indexed: false,\n                internalType: \"bytes32\",\n                name: \"txHash\",\n                type: \"bytes32\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint64\",\n                name: \"expirationTimestamp\",\n                type: \"uint64\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"uint256\",\n                        name: \"txType\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"from\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"to\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"gasLimit\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"gasPerPubdataByteLimit\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"maxFeePerGas\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"maxPriorityFeePerGas\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"paymaster\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"nonce\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"value\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"uint256[4]\",\n                        name: \"reserved\",\n                        type: \"uint256[4]\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"signature\",\n                        type: \"bytes\",\n                    },\n                    {\n                        internalType: \"uint256[]\",\n                        name: \"factoryDeps\",\n                        type: \"uint256[]\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"paymasterInput\",\n                        type: \"bytes\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"reservedDynamic\",\n                        type: \"bytes\",\n                    },\n                ],\n                indexed: false,\n                internalType: \"struct IMailbox.L2CanonicalTransaction\",\n                name: \"transaction\",\n                type: \"tuple\",\n            },\n            {\n                indexed: false,\n                internalType: \"bytes[]\",\n                name: \"factoryDeps\",\n                type: \"bytes[]\",\n            },\n        ],\n        name: \"NewPriorityRequest\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"oldPriorityTxMaxGasLimit\",\n                type: \"uint256\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"newPriorityTxMaxGasLimit\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"NewPriorityTxMaxGasLimit\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [],\n        name: \"Unfreeze\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"validatorAddress\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"bool\",\n                name: \"isActive\",\n                type: \"bool\",\n            },\n        ],\n        name: \"ValidatorStatusUpdate\",\n        type: \"event\",\n    },\n    {\n        inputs: [],\n        name: \"acceptAdmin\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"acceptGovernor\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: \"uint64\",\n                        name: \"batchNumber\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"batchHash\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"indexRepeatedStorageChanges\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"numberOfLayer1Txs\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"priorityOperationsHash\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"l2LogsTreeRoot\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"timestamp\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"commitment\",\n                        type: \"bytes32\",\n                    },\n                ],\n                internalType: \"struct IExecutor.StoredBatchInfo\",\n                name: \"_lastCommittedBatchData\",\n                type: \"tuple\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"uint64\",\n                        name: \"batchNumber\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"timestamp\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"indexRepeatedStorageChanges\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"newStateRoot\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"numberOfLayer1Txs\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"priorityOperationsHash\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"bootloaderHeapInitialContentsHash\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"eventsQueueStateHash\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"systemLogs\",\n                        type: \"bytes\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"totalL2ToL1Pubdata\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct IExecutor.CommitBatchInfo[]\",\n                name: \"_newBatchesData\",\n                type: \"tuple[]\",\n            },\n        ],\n        name: \"commitBatches\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: \"uint64\",\n                        name: \"batchNumber\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"batchHash\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"indexRepeatedStorageChanges\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"numberOfLayer1Txs\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"priorityOperationsHash\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"l2LogsTreeRoot\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"timestamp\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"commitment\",\n                        type: \"bytes32\",\n                    },\n                ],\n                internalType: \"struct IExecutor.StoredBatchInfo[]\",\n                name: \"_batchesData\",\n                type: \"tuple[]\",\n            },\n        ],\n        name: \"executeBatches\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        components: [\n                            {\n                                internalType: \"address\",\n                                name: \"facet\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"enum Diamond.Action\",\n                                name: \"action\",\n                                type: \"uint8\",\n                            },\n                            {\n                                internalType: \"bool\",\n                                name: \"isFreezable\",\n                                type: \"bool\",\n                            },\n                            {\n                                internalType: \"bytes4[]\",\n                                name: \"selectors\",\n                                type: \"bytes4[]\",\n                            },\n                        ],\n                        internalType: \"struct Diamond.FacetCut[]\",\n                        name: \"facetCuts\",\n                        type: \"tuple[]\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"initAddress\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"initCalldata\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct Diamond.DiamondCutData\",\n                name: \"_diamondCut\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"executeUpgrade\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes4\",\n                name: \"_selector\",\n                type: \"bytes4\",\n            },\n        ],\n        name: \"facetAddress\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"facet\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"facetAddresses\",\n        outputs: [\n            {\n                internalType: \"address[]\",\n                name: \"facets\",\n                type: \"address[]\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_facet\",\n                type: \"address\",\n            },\n        ],\n        name: \"facetFunctionSelectors\",\n        outputs: [\n            {\n                internalType: \"bytes4[]\",\n                name: \"\",\n                type: \"bytes4[]\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"facets\",\n        outputs: [\n            {\n                components: [\n                    {\n                        internalType: \"address\",\n                        name: \"addr\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"bytes4[]\",\n                        name: \"selectors\",\n                        type: \"bytes4[]\",\n                    },\n                ],\n                internalType: \"struct IGetters.Facet[]\",\n                name: \"\",\n                type: \"tuple[]\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_l2BatchNumber\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_l2MessageIndex\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"uint16\",\n                name: \"_l2TxNumberInBatch\",\n                type: \"uint16\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"_message\",\n                type: \"bytes\",\n            },\n            {\n                internalType: \"bytes32[]\",\n                name: \"_merkleProof\",\n                type: \"bytes32[]\",\n            },\n        ],\n        name: \"finalizeEthWithdrawal\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"freezeDiamond\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"getFirstUnprocessedPriorityTx\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"getGovernor\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"getL2BootloaderBytecodeHash\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"getL2DefaultAccountBytecodeHash\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"getL2SystemContractsUpgradeBatchNumber\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"getL2SystemContractsUpgradeTxHash\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"getName\",\n        outputs: [\n            {\n                internalType: \"string\",\n                name: \"\",\n                type: \"string\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"getPendingGovernor\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"getPriorityQueueSize\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"getPriorityTxMaxGasLimit\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"getProtocolVersion\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"getTotalBatchesCommitted\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"getTotalBatchesExecuted\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"getTotalBatchesVerified\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"getTotalPriorityTxs\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"getVerifier\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"getVerifierParams\",\n        outputs: [\n            {\n                components: [\n                    {\n                        internalType: \"bytes32\",\n                        name: \"recursionNodeLevelVkHash\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"recursionLeafLevelVkHash\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"recursionCircuitsSetVksHash\",\n                        type: \"bytes32\",\n                    },\n                ],\n                internalType: \"struct VerifierParams\",\n                name: \"\",\n                type: \"tuple\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"isDiamondStorageFrozen\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_l2BatchNumber\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_l2MessageIndex\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"isEthWithdrawalFinalized\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_facet\",\n                type: \"address\",\n            },\n        ],\n        name: \"isFacetFreezable\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"isFreezable\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes4\",\n                name: \"_selector\",\n                type: \"bytes4\",\n            },\n        ],\n        name: \"isFunctionFreezable\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_address\",\n                type: \"address\",\n            },\n        ],\n        name: \"isValidator\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_batchNumber\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"l2LogsRootHash\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"hash\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_gasPrice\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_l2GasLimit\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_l2GasPerPubdataByteLimit\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"l2TransactionBaseCost\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"priorityQueueFrontOperation\",\n        outputs: [\n            {\n                components: [\n                    {\n                        internalType: \"bytes32\",\n                        name: \"canonicalTxHash\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"expirationTimestamp\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint192\",\n                        name: \"layer2Tip\",\n                        type: \"uint192\",\n                    },\n                ],\n                internalType: \"struct PriorityOperation\",\n                name: \"\",\n                type: \"tuple\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: \"uint64\",\n                        name: \"batchNumber\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"batchHash\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"indexRepeatedStorageChanges\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"numberOfLayer1Txs\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"priorityOperationsHash\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"l2LogsTreeRoot\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"timestamp\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"commitment\",\n                        type: \"bytes32\",\n                    },\n                ],\n                internalType: \"struct IExecutor.StoredBatchInfo\",\n                name: \"_prevBatch\",\n                type: \"tuple\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"uint64\",\n                        name: \"batchNumber\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"batchHash\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"indexRepeatedStorageChanges\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"numberOfLayer1Txs\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"priorityOperationsHash\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"l2LogsTreeRoot\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"timestamp\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"commitment\",\n                        type: \"bytes32\",\n                    },\n                ],\n                internalType: \"struct IExecutor.StoredBatchInfo[]\",\n                name: \"_committedBatches\",\n                type: \"tuple[]\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"uint256[]\",\n                        name: \"recursiveAggregationInput\",\n                        type: \"uint256[]\",\n                    },\n                    {\n                        internalType: \"uint256[]\",\n                        name: \"serializedProof\",\n                        type: \"uint256[]\",\n                    },\n                ],\n                internalType: \"struct IExecutor.ProofInput\",\n                name: \"_proof\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"proveBatches\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"_l2TxHash\",\n                type: \"bytes32\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_l2BatchNumber\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_l2MessageIndex\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"uint16\",\n                name: \"_l2TxNumberInBatch\",\n                type: \"uint16\",\n            },\n            {\n                internalType: \"bytes32[]\",\n                name: \"_merkleProof\",\n                type: \"bytes32[]\",\n            },\n            {\n                internalType: \"enum TxStatus\",\n                name: \"_status\",\n                type: \"uint8\",\n            },\n        ],\n        name: \"proveL1ToL2TransactionStatus\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_l2BatchNumber\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_index\",\n                type: \"uint256\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"uint8\",\n                        name: \"l2ShardId\",\n                        type: \"uint8\",\n                    },\n                    {\n                        internalType: \"bool\",\n                        name: \"isService\",\n                        type: \"bool\",\n                    },\n                    {\n                        internalType: \"uint16\",\n                        name: \"txNumberInBatch\",\n                        type: \"uint16\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"sender\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"key\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"value\",\n                        type: \"bytes32\",\n                    },\n                ],\n                internalType: \"struct L2Log\",\n                name: \"_log\",\n                type: \"tuple\",\n            },\n            {\n                internalType: \"bytes32[]\",\n                name: \"_proof\",\n                type: \"bytes32[]\",\n            },\n        ],\n        name: \"proveL2LogInclusion\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_l2BatchNumber\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_index\",\n                type: \"uint256\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"uint16\",\n                        name: \"txNumberInBatch\",\n                        type: \"uint16\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"sender\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct L2Message\",\n                name: \"_message\",\n                type: \"tuple\",\n            },\n            {\n                internalType: \"bytes32[]\",\n                name: \"_proof\",\n                type: \"bytes32[]\",\n            },\n        ],\n        name: \"proveL2MessageInclusion\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_contractL2\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_l2Value\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"_calldata\",\n                type: \"bytes\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_l2GasLimit\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_l2GasPerPubdataByteLimit\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"bytes[]\",\n                name: \"_factoryDeps\",\n                type: \"bytes[]\",\n            },\n            {\n                internalType: \"address\",\n                name: \"_refundRecipient\",\n                type: \"address\",\n            },\n        ],\n        name: \"requestL2Transaction\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"canonicalTxHash\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_newLastBatch\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"revertBatches\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_newPendingAdmin\",\n                type: \"address\",\n            },\n        ],\n        name: \"setPendingAdmin\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_newPendingGovernor\",\n                type: \"address\",\n            },\n        ],\n        name: \"setPendingGovernor\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bool\",\n                name: \"_zkPorterIsAvailable\",\n                type: \"bool\",\n            },\n        ],\n        name: \"setPorterAvailability\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_newPriorityTxMaxGasLimit\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"setPriorityTxMaxGasLimit\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_validator\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bool\",\n                name: \"_active\",\n                type: \"bool\",\n            },\n        ],\n        name: \"setValidator\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_batchNumber\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"storedBatchHash\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"unfreezeDiamond\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/zksync-ethers/build/typechain/IZkSyncFactory.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/zksync-ethers/build/typechain/Ierc20Factory.js":
/*!*********************************************************************!*\
  !*** ./node_modules/zksync-ethers/build/typechain/Ierc20Factory.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Ierc20Factory = void 0;\nconst ethers_1 = __webpack_require__(/*! ethers */ \"(ssr)/./node_modules/ethers/lib.esm/index.js\");\nclass Ierc20Factory {\n    static connect(address, signerOrProvider) {\n        return new ethers_1.Contract(address, _abi, signerOrProvider);\n    }\n}\nexports.Ierc20Factory = Ierc20Factory;\nconst _abi = [\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"owner\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"spender\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"value\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"Approval\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"from\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"to\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"value\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"Transfer\",\n        type: \"event\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"owner\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"spender\",\n                type: \"address\",\n            },\n        ],\n        name: \"allowance\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"spender\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"approve\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"account\",\n                type: \"address\",\n            },\n        ],\n        name: \"balanceOf\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"decimals\",\n        outputs: [\n            {\n                internalType: \"uint8\",\n                name: \"\",\n                type: \"uint8\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"name\",\n        outputs: [\n            {\n                internalType: \"string\",\n                name: \"\",\n                type: \"string\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"symbol\",\n        outputs: [\n            {\n                internalType: \"string\",\n                name: \"\",\n                type: \"string\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"totalSupply\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"to\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"transfer\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"from\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"to\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"transferFrom\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/zksync-ethers/build/typechain/Ierc20Factory.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/zksync-ethers/build/typechain/Il1BridgeFactory.js":
/*!************************************************************************!*\
  !*** ./node_modules/zksync-ethers/build/typechain/Il1BridgeFactory.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Il1BridgeFactory = void 0;\nconst ethers_1 = __webpack_require__(/*! ethers */ \"(ssr)/./node_modules/ethers/lib.esm/index.js\");\nclass Il1BridgeFactory {\n    static connect(address, signerOrProvider) {\n        return new ethers_1.Contract(address, _abi, signerOrProvider);\n    }\n}\nexports.Il1BridgeFactory = Il1BridgeFactory;\nconst _abi = [\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"to\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"l1Token\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"ClaimedFailedDeposit\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"bytes32\",\n                name: \"l2DepositTxHash\",\n                type: \"bytes32\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"from\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"to\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"l1Token\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"DepositInitiated\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"to\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"l1Token\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"WithdrawalFinalized\",\n        type: \"event\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_depositSender\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"_l1Token\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"_l2TxHash\",\n                type: \"bytes32\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_l2BatchNumber\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_l2MessageIndex\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"uint16\",\n                name: \"_l2TxNumberInBatch\",\n                type: \"uint16\",\n            },\n            {\n                internalType: \"bytes32[]\",\n                name: \"_merkleProof\",\n                type: \"bytes32[]\",\n            },\n        ],\n        name: \"claimFailedDeposit\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_l2Receiver\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"_l1Token\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_amount\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_l2TxGasLimit\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_l2TxGasPerPubdataByte\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"address\",\n                name: \"_refundRecipient\",\n                type: \"address\",\n            },\n        ],\n        name: \"deposit\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"txHash\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_l2BatchNumber\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_l2MessageIndex\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"uint16\",\n                name: \"_l2TxNumberInBatch\",\n                type: \"uint16\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"_message\",\n                type: \"bytes\",\n            },\n            {\n                internalType: \"bytes32[]\",\n                name: \"_merkleProof\",\n                type: \"bytes32[]\",\n            },\n        ],\n        name: \"finalizeWithdrawal\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_l2BatchNumber\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_l2MessageIndex\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"isWithdrawalFinalized\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"l2Bridge\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_l1Token\",\n                type: \"address\",\n            },\n        ],\n        name: \"l2TokenAddress\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/zksync-ethers/build/typechain/Il1BridgeFactory.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/zksync-ethers/build/typechain/Il2BridgeFactory.js":
/*!************************************************************************!*\
  !*** ./node_modules/zksync-ethers/build/typechain/Il2BridgeFactory.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Il2BridgeFactory = void 0;\nconst ethers_1 = __webpack_require__(/*! ethers */ \"(ssr)/./node_modules/ethers/lib.esm/index.js\");\nclass Il2BridgeFactory {\n    static connect(address, signerOrProvider) {\n        return new ethers_1.Contract(address, _abi, signerOrProvider);\n    }\n}\nexports.Il2BridgeFactory = Il2BridgeFactory;\nconst _abi = [\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_l1Sender\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"_l2Receiver\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"_l1Token\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_amount\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"_data\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"finalizeDeposit\",\n        outputs: [],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"l1Bridge\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_l2Token\",\n                type: \"address\",\n            },\n        ],\n        name: \"l1TokenAddress\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_l1Token\",\n                type: \"address\",\n            },\n        ],\n        name: \"l2TokenAddress\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_l1Receiver\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"_l2Token\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"withdraw\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvemtzeW5jLWV0aGVycy9idWlsZC90eXBlY2hhaW4vSWwyQnJpZGdlRmFjdG9yeS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx3QkFBd0I7QUFDeEIsaUJBQWlCLG1CQUFPLENBQUMsNERBQVE7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCIsInNvdXJjZXMiOlsid2VicGFjazovL3NtYXJ0LXdhbGxldC1jbGllbnQvLi9ub2RlX21vZHVsZXMvemtzeW5jLWV0aGVycy9idWlsZC90eXBlY2hhaW4vSWwyQnJpZGdlRmFjdG9yeS5qcz85YzhmIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLyogQXV0b2dlbmVyYXRlZCBmaWxlLiBEbyBub3QgZWRpdCBtYW51YWxseS4gKi9cbi8qIHRzbGludDpkaXNhYmxlICovXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5JbDJCcmlkZ2VGYWN0b3J5ID0gdm9pZCAwO1xuY29uc3QgZXRoZXJzXzEgPSByZXF1aXJlKFwiZXRoZXJzXCIpO1xuY2xhc3MgSWwyQnJpZGdlRmFjdG9yeSB7XG4gICAgc3RhdGljIGNvbm5lY3QoYWRkcmVzcywgc2lnbmVyT3JQcm92aWRlcikge1xuICAgICAgICByZXR1cm4gbmV3IGV0aGVyc18xLkNvbnRyYWN0KGFkZHJlc3MsIF9hYmksIHNpZ25lck9yUHJvdmlkZXIpO1xuICAgIH1cbn1cbmV4cG9ydHMuSWwyQnJpZGdlRmFjdG9yeSA9IElsMkJyaWRnZUZhY3Rvcnk7XG5jb25zdCBfYWJpID0gW1xuICAgIHtcbiAgICAgICAgaW5wdXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcIl9sMVNlbmRlclwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwiX2wyUmVjZWl2ZXJcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcIl9sMVRva2VuXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJfYW1vdW50XCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJieXRlc1wiLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwiX2RhdGFcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcImJ5dGVzXCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBuYW1lOiBcImZpbmFsaXplRGVwb3NpdFwiLFxuICAgICAgICBvdXRwdXRzOiBbXSxcbiAgICAgICAgc3RhdGVNdXRhYmlsaXR5OiBcInBheWFibGVcIixcbiAgICAgICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICAgIH0sXG4gICAge1xuICAgICAgICBpbnB1dHM6IFtdLFxuICAgICAgICBuYW1lOiBcImwxQnJpZGdlXCIsXG4gICAgICAgIG91dHB1dHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBzdGF0ZU11dGFiaWxpdHk6IFwidmlld1wiLFxuICAgICAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gICAgfSxcbiAgICB7XG4gICAgICAgIGlucHV0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJfbDJUb2tlblwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgbmFtZTogXCJsMVRva2VuQWRkcmVzc1wiLFxuICAgICAgICBvdXRwdXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgICAgICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICAgIH0sXG4gICAge1xuICAgICAgICBpbnB1dHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwiX2wxVG9rZW5cIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIG5hbWU6IFwibDJUb2tlbkFkZHJlc3NcIixcbiAgICAgICAgb3V0cHV0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIHN0YXRlTXV0YWJpbGl0eTogXCJ2aWV3XCIsXG4gICAgICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgICB9LFxuICAgIHtcbiAgICAgICAgaW5wdXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcIl9sMVJlY2VpdmVyXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJfbDJUb2tlblwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwiX2Ftb3VudFwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgbmFtZTogXCJ3aXRoZHJhd1wiLFxuICAgICAgICBvdXRwdXRzOiBbXSxcbiAgICAgICAgc3RhdGVNdXRhYmlsaXR5OiBcIm5vbnBheWFibGVcIixcbiAgICAgICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICAgIH0sXG5dO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/zksync-ethers/build/typechain/Il2BridgeFactory.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/zksync-ethers/build/abi/IContractDeployer.json":
/*!*********************************************************************!*\
  !*** ./node_modules/zksync-ethers/build/abi/IContractDeployer.json ***!
  \*********************************************************************/
/***/ ((module) => {

module.exports = /*#__PURE__*/JSON.parse('[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"accountAddress","type":"address"},{"indexed":false,"internalType":"enum IContractDeployer.AccountNonceOrdering","name":"nonceOrdering","type":"uint8"}],"name":"AccountNonceOrderingUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"accountAddress","type":"address"},{"indexed":false,"internalType":"enum IContractDeployer.AccountAbstractionVersion","name":"aaVersion","type":"uint8"}],"name":"AccountVersionUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"deployerAddress","type":"address"},{"indexed":true,"internalType":"bytes32","name":"bytecodeHash","type":"bytes32"},{"indexed":true,"internalType":"address","name":"contractAddress","type":"address"}],"name":"ContractDeployed","type":"event"},{"inputs":[{"internalType":"bytes32","name":"_salt","type":"bytes32"},{"internalType":"bytes32","name":"_bytecodeHash","type":"bytes32"},{"internalType":"bytes","name":"_input","type":"bytes"}],"name":"create","outputs":[{"internalType":"address","name":"newAddress","type":"address"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_salt","type":"bytes32"},{"internalType":"bytes32","name":"_bytecodeHash","type":"bytes32"},{"internalType":"bytes","name":"_input","type":"bytes"}],"name":"create2","outputs":[{"internalType":"address","name":"newAddress","type":"address"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_salt","type":"bytes32"},{"internalType":"bytes32","name":"_bytecodeHash","type":"bytes32"},{"internalType":"bytes","name":"_input","type":"bytes"},{"internalType":"enum IContractDeployer.AccountAbstractionVersion","name":"_aaVersion","type":"uint8"}],"name":"create2Account","outputs":[{"internalType":"address","name":"newAddress","type":"address"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_salt","type":"bytes32"},{"internalType":"bytes32","name":"_bytecodeHash","type":"bytes32"},{"internalType":"bytes","name":"_input","type":"bytes"},{"internalType":"enum IContractDeployer.AccountAbstractionVersion","name":"_aaVersion","type":"uint8"}],"name":"createAccount","outputs":[{"internalType":"address","name":"newAddress","type":"address"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"_address","type":"address"}],"name":"getAccountInfo","outputs":[{"components":[{"internalType":"enum IContractDeployer.AccountAbstractionVersion","name":"supportedAAVersion","type":"uint8"},{"internalType":"enum IContractDeployer.AccountNonceOrdering","name":"nonceOrdering","type":"uint8"}],"internalType":"struct IContractDeployer.AccountInfo","name":"info","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_sender","type":"address"},{"internalType":"uint256","name":"_senderNonce","type":"uint256"}],"name":"getNewAddressCreate","outputs":[{"internalType":"address","name":"newAddress","type":"address"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"address","name":"_sender","type":"address"},{"internalType":"bytes32","name":"_bytecodeHash","type":"bytes32"},{"internalType":"bytes32","name":"_salt","type":"bytes32"},{"internalType":"bytes","name":"_input","type":"bytes"}],"name":"getNewAddressCreate2","outputs":[{"internalType":"address","name":"newAddress","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"enum IContractDeployer.AccountAbstractionVersion","name":"_version","type":"uint8"}],"name":"updateAccountVersion","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"enum IContractDeployer.AccountNonceOrdering","name":"_nonceOrdering","type":"uint8"}],"name":"updateNonceOrdering","outputs":[],"stateMutability":"nonpayable","type":"function"}]');

/***/ }),

/***/ "(ssr)/./node_modules/zksync-ethers/build/abi/IERC1271.json":
/*!************************************************************!*\
  !*** ./node_modules/zksync-ethers/build/abi/IERC1271.json ***!
  \************************************************************/
/***/ ((module) => {

module.exports = /*#__PURE__*/JSON.parse('[{"inputs":[{"internalType":"bytes32","name":"hash","type":"bytes32"},{"internalType":"bytes","name":"signature","type":"bytes"}],"name":"isValidSignature","outputs":[{"internalType":"bytes4","name":"magicValue","type":"bytes4"}],"stateMutability":"view","type":"function"}]');

/***/ }),

/***/ "(ssr)/./node_modules/zksync-ethers/build/abi/IERC20.json":
/*!**********************************************************!*\
  !*** ./node_modules/zksync-ethers/build/abi/IERC20.json ***!
  \**********************************************************/
/***/ ((module) => {

module.exports = /*#__PURE__*/JSON.parse('[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}]');

/***/ }),

/***/ "(ssr)/./node_modules/zksync-ethers/build/abi/IL1Bridge.json":
/*!*************************************************************!*\
  !*** ./node_modules/zksync-ethers/build/abi/IL1Bridge.json ***!
  \*************************************************************/
/***/ ((module) => {

module.exports = /*#__PURE__*/JSON.parse('[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"address","name":"l1Token","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"ClaimedFailedDeposit","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"l2DepositTxHash","type":"bytes32"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"address","name":"l1Token","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"DepositInitiated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"address","name":"l1Token","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"WithdrawalFinalized","type":"event"},{"inputs":[{"internalType":"address","name":"_depositSender","type":"address"},{"internalType":"address","name":"_l1Token","type":"address"},{"internalType":"bytes32","name":"_l2TxHash","type":"bytes32"},{"internalType":"uint256","name":"_l2BatchNumber","type":"uint256"},{"internalType":"uint256","name":"_l2MessageIndex","type":"uint256"},{"internalType":"uint16","name":"_l2TxNumberInBatch","type":"uint16"},{"internalType":"bytes32[]","name":"_merkleProof","type":"bytes32[]"}],"name":"claimFailedDeposit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_l2Receiver","type":"address"},{"internalType":"address","name":"_l1Token","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"uint256","name":"_l2TxGasLimit","type":"uint256"},{"internalType":"uint256","name":"_l2TxGasPerPubdataByte","type":"uint256"},{"internalType":"address","name":"_refundRecipient","type":"address"}],"name":"deposit","outputs":[{"internalType":"bytes32","name":"txHash","type":"bytes32"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_l2BatchNumber","type":"uint256"},{"internalType":"uint256","name":"_l2MessageIndex","type":"uint256"},{"internalType":"uint16","name":"_l2TxNumberInBatch","type":"uint16"},{"internalType":"bytes","name":"_message","type":"bytes"},{"internalType":"bytes32[]","name":"_merkleProof","type":"bytes32[]"}],"name":"finalizeWithdrawal","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_l2BatchNumber","type":"uint256"},{"internalType":"uint256","name":"_l2MessageIndex","type":"uint256"}],"name":"isWithdrawalFinalized","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"l2Bridge","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_l1Token","type":"address"}],"name":"l2TokenAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}]');

/***/ }),

/***/ "(ssr)/./node_modules/zksync-ethers/build/abi/IL1Messenger.json":
/*!****************************************************************!*\
  !*** ./node_modules/zksync-ethers/build/abi/IL1Messenger.json ***!
  \****************************************************************/
/***/ ((module) => {

module.exports = /*#__PURE__*/JSON.parse('[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"_bytecodeHash","type":"bytes32"}],"name":"BytecodeL1PublicationRequested","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"_sender","type":"address"},{"indexed":true,"internalType":"bytes32","name":"_hash","type":"bytes32"},{"indexed":false,"internalType":"bytes","name":"_message","type":"bytes"}],"name":"L1MessageSent","type":"event"},{"anonymous":false,"inputs":[{"components":[{"internalType":"uint8","name":"l2ShardId","type":"uint8"},{"internalType":"bool","name":"isService","type":"bool"},{"internalType":"uint16","name":"txNumberInBlock","type":"uint16"},{"internalType":"address","name":"sender","type":"address"},{"internalType":"bytes32","name":"key","type":"bytes32"},{"internalType":"bytes32","name":"value","type":"bytes32"}],"indexed":false,"internalType":"struct L2ToL1Log","name":"_l2log","type":"tuple"}],"name":"L2ToL1LogSent","type":"event"},{"inputs":[{"internalType":"bytes32","name":"_bytecodeHash","type":"bytes32"}],"name":"requestBytecodeL1Publication","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bool","name":"_isService","type":"bool"},{"internalType":"bytes32","name":"_key","type":"bytes32"},{"internalType":"bytes32","name":"_value","type":"bytes32"}],"name":"sendL2ToL1Log","outputs":[{"internalType":"uint256","name":"logIdInMerkleTree","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"_message","type":"bytes"}],"name":"sendToL1","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"}]');

/***/ }),

/***/ "(ssr)/./node_modules/zksync-ethers/build/abi/IL2Bridge.json":
/*!*************************************************************!*\
  !*** ./node_modules/zksync-ethers/build/abi/IL2Bridge.json ***!
  \*************************************************************/
/***/ ((module) => {

module.exports = /*#__PURE__*/JSON.parse('[{"inputs":[{"internalType":"address","name":"_l1Sender","type":"address"},{"internalType":"address","name":"_l2Receiver","type":"address"},{"internalType":"address","name":"_l1Token","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"bytes","name":"_data","type":"bytes"}],"name":"finalizeDeposit","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"l1Bridge","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_l2Token","type":"address"}],"name":"l1TokenAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_l1Token","type":"address"}],"name":"l2TokenAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_l1Receiver","type":"address"},{"internalType":"address","name":"_l2Token","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"withdraw","outputs":[],"stateMutability":"nonpayable","type":"function"}]');

/***/ }),

/***/ "(ssr)/./node_modules/zksync-ethers/build/abi/INonceHolder.json":
/*!****************************************************************!*\
  !*** ./node_modules/zksync-ethers/build/abi/INonceHolder.json ***!
  \****************************************************************/
/***/ ((module) => {

module.exports = /*#__PURE__*/JSON.parse('[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"accountAddress","type":"address"},{"indexed":true,"internalType":"uint256","name":"key","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"ValueSetUnderNonce","type":"event"},{"inputs":[{"internalType":"address","name":"_address","type":"address"}],"name":"getDeploymentNonce","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_address","type":"address"}],"name":"getMinNonce","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_address","type":"address"}],"name":"getRawNonce","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_key","type":"uint256"}],"name":"getValueUnderNonce","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_value","type":"uint256"}],"name":"increaseMinNonce","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_address","type":"address"}],"name":"incrementDeploymentNonce","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_expectedNonce","type":"uint256"}],"name":"incrementMinNonceIfEquals","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_address","type":"address"},{"internalType":"uint256","name":"_nonce","type":"uint256"}],"name":"isNonceUsed","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_key","type":"uint256"},{"internalType":"uint256","name":"_value","type":"uint256"}],"name":"setValueUnderNonce","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_address","type":"address"},{"internalType":"uint256","name":"_key","type":"uint256"},{"internalType":"bool","name":"_shouldBeUsed","type":"bool"}],"name":"validateNonceUsage","outputs":[],"stateMutability":"view","type":"function"}]');

/***/ }),

/***/ "(ssr)/./node_modules/zksync-ethers/build/abi/IPaymasterFlow.json":
/*!******************************************************************!*\
  !*** ./node_modules/zksync-ethers/build/abi/IPaymasterFlow.json ***!
  \******************************************************************/
/***/ ((module) => {

module.exports = /*#__PURE__*/JSON.parse('[{"inputs":[{"internalType":"address","name":"_token","type":"address"},{"internalType":"uint256","name":"_minAllowance","type":"uint256"},{"internalType":"bytes","name":"_innerInput","type":"bytes"}],"name":"approvalBased","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"input","type":"bytes"}],"name":"general","outputs":[],"stateMutability":"nonpayable","type":"function"}]');

/***/ }),

/***/ "(ssr)/./node_modules/zksync-ethers/build/abi/IZkSync.json":
/*!***********************************************************!*\
  !*** ./node_modules/zksync-ethers/build/abi/IZkSync.json ***!
  \***********************************************************/
/***/ ((module) => {

module.exports = /*#__PURE__*/JSON.parse('[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"batchNumber","type":"uint256"},{"indexed":true,"internalType":"bytes32","name":"batchHash","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"commitment","type":"bytes32"}],"name":"BlockCommit","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"batchNumber","type":"uint256"},{"indexed":true,"internalType":"bytes32","name":"batchHash","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"commitment","type":"bytes32"}],"name":"BlockExecution","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"totalBatchesCommitted","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"totalBatchesVerified","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"totalBatchesExecuted","type":"uint256"}],"name":"BlocksRevert","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"previousLastVerifiedBatch","type":"uint256"},{"indexed":true,"internalType":"uint256","name":"currentLastVerifiedBatch","type":"uint256"}],"name":"BlocksVerification","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"EthWithdrawalFinalized","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"address","name":"facet","type":"address"},{"internalType":"enum Diamond.Action","name":"action","type":"uint8"},{"internalType":"bool","name":"isFreezable","type":"bool"},{"internalType":"bytes4[]","name":"selectors","type":"bytes4[]"}],"internalType":"struct Diamond.FacetCut[]","name":"facetCuts","type":"tuple[]"},{"internalType":"address","name":"initAddress","type":"address"},{"internalType":"bytes","name":"initCalldata","type":"bytes"}],"indexed":false,"internalType":"struct Diamond.DiamondCutData","name":"diamondCut","type":"tuple"}],"name":"ExecuteUpgrade","type":"event"},{"anonymous":false,"inputs":[],"name":"Freeze","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bool","name":"isPorterAvailable","type":"bool"}],"name":"IsPorterAvailableStatusUpdate","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"oldAdmin","type":"address"},{"indexed":true,"internalType":"address","name":"newAdmin","type":"address"}],"name":"NewAdmin","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"oldGovernor","type":"address"},{"indexed":true,"internalType":"address","name":"newGovernor","type":"address"}],"name":"NewGovernor","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"oldPendingAdmin","type":"address"},{"indexed":true,"internalType":"address","name":"newPendingAdmin","type":"address"}],"name":"NewPendingAdmin","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"oldPendingGovernor","type":"address"},{"indexed":true,"internalType":"address","name":"newPendingGovernor","type":"address"}],"name":"NewPendingGovernor","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"txId","type":"uint256"},{"indexed":false,"internalType":"bytes32","name":"txHash","type":"bytes32"},{"indexed":false,"internalType":"uint64","name":"expirationTimestamp","type":"uint64"},{"components":[{"internalType":"uint256","name":"txType","type":"uint256"},{"internalType":"uint256","name":"from","type":"uint256"},{"internalType":"uint256","name":"to","type":"uint256"},{"internalType":"uint256","name":"gasLimit","type":"uint256"},{"internalType":"uint256","name":"gasPerPubdataByteLimit","type":"uint256"},{"internalType":"uint256","name":"maxFeePerGas","type":"uint256"},{"internalType":"uint256","name":"maxPriorityFeePerGas","type":"uint256"},{"internalType":"uint256","name":"paymaster","type":"uint256"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256[4]","name":"reserved","type":"uint256[4]"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"bytes","name":"signature","type":"bytes"},{"internalType":"uint256[]","name":"factoryDeps","type":"uint256[]"},{"internalType":"bytes","name":"paymasterInput","type":"bytes"},{"internalType":"bytes","name":"reservedDynamic","type":"bytes"}],"indexed":false,"internalType":"struct IMailbox.L2CanonicalTransaction","name":"transaction","type":"tuple"},{"indexed":false,"internalType":"bytes[]","name":"factoryDeps","type":"bytes[]"}],"name":"NewPriorityRequest","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"oldPriorityTxMaxGasLimit","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newPriorityTxMaxGasLimit","type":"uint256"}],"name":"NewPriorityTxMaxGasLimit","type":"event"},{"anonymous":false,"inputs":[],"name":"Unfreeze","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"validatorAddress","type":"address"},{"indexed":false,"internalType":"bool","name":"isActive","type":"bool"}],"name":"ValidatorStatusUpdate","type":"event"},{"inputs":[],"name":"acceptAdmin","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"acceptGovernor","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"uint64","name":"batchNumber","type":"uint64"},{"internalType":"bytes32","name":"batchHash","type":"bytes32"},{"internalType":"uint64","name":"indexRepeatedStorageChanges","type":"uint64"},{"internalType":"uint256","name":"numberOfLayer1Txs","type":"uint256"},{"internalType":"bytes32","name":"priorityOperationsHash","type":"bytes32"},{"internalType":"bytes32","name":"l2LogsTreeRoot","type":"bytes32"},{"internalType":"uint256","name":"timestamp","type":"uint256"},{"internalType":"bytes32","name":"commitment","type":"bytes32"}],"internalType":"struct IExecutor.StoredBatchInfo","name":"_lastCommittedBatchData","type":"tuple"},{"components":[{"internalType":"uint64","name":"batchNumber","type":"uint64"},{"internalType":"uint64","name":"timestamp","type":"uint64"},{"internalType":"uint64","name":"indexRepeatedStorageChanges","type":"uint64"},{"internalType":"bytes32","name":"newStateRoot","type":"bytes32"},{"internalType":"uint256","name":"numberOfLayer1Txs","type":"uint256"},{"internalType":"bytes32","name":"priorityOperationsHash","type":"bytes32"},{"internalType":"bytes32","name":"bootloaderHeapInitialContentsHash","type":"bytes32"},{"internalType":"bytes32","name":"eventsQueueStateHash","type":"bytes32"},{"internalType":"bytes","name":"systemLogs","type":"bytes"},{"internalType":"bytes","name":"totalL2ToL1Pubdata","type":"bytes"}],"internalType":"struct IExecutor.CommitBatchInfo[]","name":"_newBatchesData","type":"tuple[]"}],"name":"commitBatches","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"uint64","name":"batchNumber","type":"uint64"},{"internalType":"bytes32","name":"batchHash","type":"bytes32"},{"internalType":"uint64","name":"indexRepeatedStorageChanges","type":"uint64"},{"internalType":"uint256","name":"numberOfLayer1Txs","type":"uint256"},{"internalType":"bytes32","name":"priorityOperationsHash","type":"bytes32"},{"internalType":"bytes32","name":"l2LogsTreeRoot","type":"bytes32"},{"internalType":"uint256","name":"timestamp","type":"uint256"},{"internalType":"bytes32","name":"commitment","type":"bytes32"}],"internalType":"struct IExecutor.StoredBatchInfo[]","name":"_batchesData","type":"tuple[]"}],"name":"executeBatches","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"components":[{"internalType":"address","name":"facet","type":"address"},{"internalType":"enum Diamond.Action","name":"action","type":"uint8"},{"internalType":"bool","name":"isFreezable","type":"bool"},{"internalType":"bytes4[]","name":"selectors","type":"bytes4[]"}],"internalType":"struct Diamond.FacetCut[]","name":"facetCuts","type":"tuple[]"},{"internalType":"address","name":"initAddress","type":"address"},{"internalType":"bytes","name":"initCalldata","type":"bytes"}],"internalType":"struct Diamond.DiamondCutData","name":"_diamondCut","type":"tuple"}],"name":"executeUpgrade","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"_selector","type":"bytes4"}],"name":"facetAddress","outputs":[{"internalType":"address","name":"facet","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"facetAddresses","outputs":[{"internalType":"address[]","name":"facets","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_facet","type":"address"}],"name":"facetFunctionSelectors","outputs":[{"internalType":"bytes4[]","name":"","type":"bytes4[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"facets","outputs":[{"components":[{"internalType":"address","name":"addr","type":"address"},{"internalType":"bytes4[]","name":"selectors","type":"bytes4[]"}],"internalType":"struct IGetters.Facet[]","name":"","type":"tuple[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_l2BatchNumber","type":"uint256"},{"internalType":"uint256","name":"_l2MessageIndex","type":"uint256"},{"internalType":"uint16","name":"_l2TxNumberInBatch","type":"uint16"},{"internalType":"bytes","name":"_message","type":"bytes"},{"internalType":"bytes32[]","name":"_merkleProof","type":"bytes32[]"}],"name":"finalizeEthWithdrawal","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"freezeDiamond","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getFirstUnprocessedPriorityTx","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getGovernor","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getL2BootloaderBytecodeHash","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getL2DefaultAccountBytecodeHash","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getL2SystemContractsUpgradeBatchNumber","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getL2SystemContractsUpgradeTxHash","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getName","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getPendingGovernor","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getPriorityQueueSize","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getPriorityTxMaxGasLimit","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getProtocolVersion","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getTotalBatchesCommitted","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getTotalBatchesExecuted","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getTotalBatchesVerified","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getTotalPriorityTxs","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getVerifier","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getVerifierParams","outputs":[{"components":[{"internalType":"bytes32","name":"recursionNodeLevelVkHash","type":"bytes32"},{"internalType":"bytes32","name":"recursionLeafLevelVkHash","type":"bytes32"},{"internalType":"bytes32","name":"recursionCircuitsSetVksHash","type":"bytes32"}],"internalType":"struct VerifierParams","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"isDiamondStorageFrozen","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_l2BatchNumber","type":"uint256"},{"internalType":"uint256","name":"_l2MessageIndex","type":"uint256"}],"name":"isEthWithdrawalFinalized","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_facet","type":"address"}],"name":"isFacetFreezable","outputs":[{"internalType":"bool","name":"isFreezable","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes4","name":"_selector","type":"bytes4"}],"name":"isFunctionFreezable","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_address","type":"address"}],"name":"isValidator","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_batchNumber","type":"uint256"}],"name":"l2LogsRootHash","outputs":[{"internalType":"bytes32","name":"hash","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_gasPrice","type":"uint256"},{"internalType":"uint256","name":"_l2GasLimit","type":"uint256"},{"internalType":"uint256","name":"_l2GasPerPubdataByteLimit","type":"uint256"}],"name":"l2TransactionBaseCost","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"priorityQueueFrontOperation","outputs":[{"components":[{"internalType":"bytes32","name":"canonicalTxHash","type":"bytes32"},{"internalType":"uint64","name":"expirationTimestamp","type":"uint64"},{"internalType":"uint192","name":"layer2Tip","type":"uint192"}],"internalType":"struct PriorityOperation","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"uint64","name":"batchNumber","type":"uint64"},{"internalType":"bytes32","name":"batchHash","type":"bytes32"},{"internalType":"uint64","name":"indexRepeatedStorageChanges","type":"uint64"},{"internalType":"uint256","name":"numberOfLayer1Txs","type":"uint256"},{"internalType":"bytes32","name":"priorityOperationsHash","type":"bytes32"},{"internalType":"bytes32","name":"l2LogsTreeRoot","type":"bytes32"},{"internalType":"uint256","name":"timestamp","type":"uint256"},{"internalType":"bytes32","name":"commitment","type":"bytes32"}],"internalType":"struct IExecutor.StoredBatchInfo","name":"_prevBatch","type":"tuple"},{"components":[{"internalType":"uint64","name":"batchNumber","type":"uint64"},{"internalType":"bytes32","name":"batchHash","type":"bytes32"},{"internalType":"uint64","name":"indexRepeatedStorageChanges","type":"uint64"},{"internalType":"uint256","name":"numberOfLayer1Txs","type":"uint256"},{"internalType":"bytes32","name":"priorityOperationsHash","type":"bytes32"},{"internalType":"bytes32","name":"l2LogsTreeRoot","type":"bytes32"},{"internalType":"uint256","name":"timestamp","type":"uint256"},{"internalType":"bytes32","name":"commitment","type":"bytes32"}],"internalType":"struct IExecutor.StoredBatchInfo[]","name":"_committedBatches","type":"tuple[]"},{"components":[{"internalType":"uint256[]","name":"recursiveAggregationInput","type":"uint256[]"},{"internalType":"uint256[]","name":"serializedProof","type":"uint256[]"}],"internalType":"struct IExecutor.ProofInput","name":"_proof","type":"tuple"}],"name":"proveBatches","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_l2TxHash","type":"bytes32"},{"internalType":"uint256","name":"_l2BatchNumber","type":"uint256"},{"internalType":"uint256","name":"_l2MessageIndex","type":"uint256"},{"internalType":"uint16","name":"_l2TxNumberInBatch","type":"uint16"},{"internalType":"bytes32[]","name":"_merkleProof","type":"bytes32[]"},{"internalType":"enum TxStatus","name":"_status","type":"uint8"}],"name":"proveL1ToL2TransactionStatus","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_l2BatchNumber","type":"uint256"},{"internalType":"uint256","name":"_index","type":"uint256"},{"components":[{"internalType":"uint8","name":"l2ShardId","type":"uint8"},{"internalType":"bool","name":"isService","type":"bool"},{"internalType":"uint16","name":"txNumberInBatch","type":"uint16"},{"internalType":"address","name":"sender","type":"address"},{"internalType":"bytes32","name":"key","type":"bytes32"},{"internalType":"bytes32","name":"value","type":"bytes32"}],"internalType":"struct L2Log","name":"_log","type":"tuple"},{"internalType":"bytes32[]","name":"_proof","type":"bytes32[]"}],"name":"proveL2LogInclusion","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_l2BatchNumber","type":"uint256"},{"internalType":"uint256","name":"_index","type":"uint256"},{"components":[{"internalType":"uint16","name":"txNumberInBatch","type":"uint16"},{"internalType":"address","name":"sender","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct L2Message","name":"_message","type":"tuple"},{"internalType":"bytes32[]","name":"_proof","type":"bytes32[]"}],"name":"proveL2MessageInclusion","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_contractL2","type":"address"},{"internalType":"uint256","name":"_l2Value","type":"uint256"},{"internalType":"bytes","name":"_calldata","type":"bytes"},{"internalType":"uint256","name":"_l2GasLimit","type":"uint256"},{"internalType":"uint256","name":"_l2GasPerPubdataByteLimit","type":"uint256"},{"internalType":"bytes[]","name":"_factoryDeps","type":"bytes[]"},{"internalType":"address","name":"_refundRecipient","type":"address"}],"name":"requestL2Transaction","outputs":[{"internalType":"bytes32","name":"canonicalTxHash","type":"bytes32"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_newLastBatch","type":"uint256"}],"name":"revertBatches","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_newPendingAdmin","type":"address"}],"name":"setPendingAdmin","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_newPendingGovernor","type":"address"}],"name":"setPendingGovernor","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bool","name":"_zkPorterIsAvailable","type":"bool"}],"name":"setPorterAvailability","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_newPriorityTxMaxGasLimit","type":"uint256"}],"name":"setPriorityTxMaxGasLimit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_validator","type":"address"},{"internalType":"bool","name":"_active","type":"bool"}],"name":"setValidator","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_batchNumber","type":"uint256"}],"name":"storedBatchHash","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"unfreezeDiamond","outputs":[],"stateMutability":"nonpayable","type":"function"}]');

/***/ })

};
;